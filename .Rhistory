kappa_marine_start = basal_p_2,
kappa_j_start = basal_p_1,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov ,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
hist(rbeta(1000,1,1))
for (r in 1:3) {
prob[r] = rbeta(1,1,1)
}
# pi = c(0.2148158, 0.1909981, 0.3164682, 0.2777180)
prob = c(NA)
for (r in 1:3) {
prob[r] = rbeta(1,1,1)
}
pi[1] = prob[1]
pi[2] = prob[2] * (1 - pi[1])
pi[3] = prob[3] * (1 - pi[1] - pi[2])
pi[4] = 1 - pi[1] - pi[2] - pi[3]
pi
D_sum = 1/D_scale^2
D_sum
D_scale = 0.3
D_sum = 1/D_scale^2
for (a in 1:A) {
Dir_alpha[a] = D_sum * pi[a]
g[a] = rgamma(n=1,Dir_alpha[a],1)
}
# AGE STRUCTURE =========
Dir_alpha = c(NA)
p = c(NA) #matrix(nrow=K,ncol=A,NA)
g = c(NA) #matrix(nrow=K,ncol=A,NA)
D_scale = 0.3
# pi = c(0.2148158, 0.1909981, 0.3164682, 0.2777180)
prob = c(NA)
for (r in 1:3) {
prob[r] = rbeta(1,1,1)
}
pi[1] = prob[1]
pi[2] = prob[2] * (1 - pi[1])
pi[3] = prob[3] * (1 - pi[1] - pi[2])
pi[4] = 1 - pi[1] - pi[2] - pi[3]
D_sum = 1/D_scale^2
for (a in 1:A) {
Dir_alpha[a] = D_sum * pi[a]
g[a] = rgamma(n=1,Dir_alpha[a],1)
}
Dir_alpha
D_sum
D_scale = 0.001
# pi = c(0.2148158, 0.1909981, 0.3164682, 0.2777180)
prob = c(NA)
for (r in 1:3) {
prob[r] = rbeta(1,1,1)
}
pi[1] = prob[1]
pi[2] = prob[2] * (1 - pi[1])
pi[3] = prob[3] * (1 - pi[1] - pi[2])
pi[4] = 1 - pi[1] - pi[2] - pi[3]
D_sum = 1/D_scale^2
for (a in 1:A) {
Dir_alpha[a] = D_sum * pi[a]
g[a] = rgamma(n=1,Dir_alpha[a],1)
}
Dir_alpha
D_scale = 0.9
# pi = c(0.2148158, 0.1909981, 0.3164682, 0.2777180)
prob = c(NA)
for (r in 1:3) {
prob[r] = rbeta(1,1,1)
}
pi[1] = prob[1]
pi[2] = prob[2] * (1 - pi[1])
pi[3] = prob[3] * (1 - pi[1] - pi[2])
pi[4] = 1 - pi[1] - pi[2] - pi[3]
D_sum = 1/D_scale^2
for (a in 1:A) {
Dir_alpha[a] = D_sum * pi[a]
g[a] = rgamma(n=1,Dir_alpha[a],1)
}
Dir_alpha
pi
1/(rbeta(1000,1,1)^2)
hist(1/(rbeta(1000,1,1)^2))
pi[1] = prob[1]
pi[2] = prob[2] * (1 - pi[1])
pi[3] = prob[3] * (1 - pi[1] - pi[2])
pi[4] = 1 - pi[1] - pi[2] - pi[3]
pi
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
basal_p_1=basal_p_1,
basal_p_2=basal_p_2,
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
N_sp_start = N_sp_start,
N_ocean_start = N_ocean_start,
N_egg_start = N_egg_start,
N_j_start =  N_j_start,
N_recruit_start = N_recruit_start,
N_e_sum_start = N_e_sum_start,
kappa_marine_start = basal_p_2,
kappa_j_start = basal_p_1,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov ,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
n_chains <- 4
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
basal_p_1=basal_p_1,
basal_p_2=basal_p_2,
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
N_sp_start = N_sp_start,
N_ocean_start = N_ocean_start,
N_egg_start = N_egg_start,
N_j_start =  N_j_start,
N_recruit_start = N_recruit_start,
N_e_sum_start = N_e_sum_start,
kappa_marine_start = basal_p_2,
kappa_j_start = basal_p_1,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov ,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# test trave etc
MCMCtrace(bh_fit)
mcmc_trace(bh_fit)
traceplot(bh_fit,  pars=  c( "D_scale", "log_c_1", "log_c_2"))
traceplot(bh_fit)#,
n_chains
traceplot(bh_fit,
pars=  c( "log_F", "log_catch_q"))
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
N_sp_start = N_sp_start,
N_ocean_start = N_ocean_start,
N_egg_start = N_egg_start,
N_j_start =  N_j_start,
N_recruit_start = N_recruit_start,
N_e_sum_start = N_e_sum_start,
kappa_marine_start = basal_p_2,
kappa_j_start = basal_p_1,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov ,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
traceplot(bh_fit)
traceplot(bh_fit,
pars=  c( "log_F", "log_catch_q"))
traceplot(bh_fit,
pars=  c( "basal_p_1", "basal_p_2"))
# load model ==============
bh_fit<- read_rds("output/stan_fit_DATA.RDS")
# PLOT PARAMS  ======================
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params <- summary(bh_fit, pars = c("log_c_1","log_c_2","log_catch_q",
"D_scale", "theta1", "theta2"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
dplyr::mutate(rowname = case_when(rowname == "theta1[1]"~ "theta1_1",
rowname == "theta1[2]"~ "theta1_2",
rowname == "theta2[1]"~ "theta2_1"
TRUE ~ rowname))
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params <- summary(bh_fit, pars = c("log_c_1","log_c_2","log_catch_q",
"D_scale", "theta1", "theta2"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()
View(params)
# PLOT PARAMS  ======================
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params <- summary(bh_fit, pars = c("log_c_1","log_c_2","log_catch_q",
"D_scale", "theta1", "theta2"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
dplyr::mutate(rowname = case_when(rowname == "theta1[1]"~ "theta1_1",
rowname == "theta1[2]"~ "theta1_2",
rowname == "theta2[1]"~ "theta2_1"
TRUE ~ rowname))
# PLOT PARAMS  ======================
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params <- summary(bh_fit, pars = c("log_c_1","log_c_2","log_catch_q",
"D_scale", "theta1", "theta2"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
dplyr::mutate(rowname = case_when(rowname == "theta1[1]"~ "theta1_1",
rowname == "theta1[2]"~ "theta1_2",
rowname == "theta2[1]"~ "theta2_1",
TRUE ~ rowname))
dat %>%
ggplot() +
geom_linerange(aes(rowname, ymin = X10.,ymax = X90.)) +
geom_crossbar(aes(rowname, mean, ymin = X10.,ymax = X90.),  fill= 'grey') +
geom_point(aes(x=rowname, y = mean_obs), color = "red") +
facet_wrap(~rowname, scales = 'free') +
labs(caption = "red is observed, black is model")
params %>%
ggplot() +
geom_linerange(aes(rowname, ymin = X10.,ymax = X90.)) +
geom_crossbar(aes(rowname, mean, ymin = X10.,ymax = X90.),  fill= 'grey') +
#geom_point(aes(x=rowname, y = mean_obs), color = "red") +
facet_wrap(~rowname, scales = 'free') +
labs(caption = "red is observed, black is model")
stage_a_cov
stage_b_cov
mcmc_intervals(bh_fit)
mcmc_intervals(bh_fit,pars=  c( "D_scale", "log_c_1", "log_c_2"))
library(rstanarm)
library(bayesplot)
mcmc_intervals(bh_fit)
mcmc_intervals(bh_fit,pars=  c( "D_scale", "log_c_1", "log_c_2")))
mcmc_intervals(bh_fit,pars=  c( "D_scale", "log_c_1", "log_c_2"))
test <- extract(bh_fit)
str(test)
plot(bh_fit, show_density = TRUE, ci_level = 0.5, fill_color = "purple")
plot(bh_fit, show_density = TRUE, ci_level = 0.5, pars=  c( "D_scale", "theta1[1]",
"theta1[2]","theta2[1]"),
fill_color = "purple")
plot(bh_fit, show_density = TRUE, ci_level = 0.95, pars=  c( "D_scale", "theta1[1]",
"theta1[2]","theta2[1]"),
fill_color = "purple")
plot(bh_fit, show_density = FALSE, ci_level = 0.95, pars=  c( "D_scale", "theta1[1]",
"theta1[2]","theta2[1]"),
fill_color = "purple")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "D_scale", "theta1[1]","theta1[2]","theta2[1]"),
fill_color = "blue")
# parameter plots
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
fill_color = "blue")
# parameter plots
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_c_1", "log_c_2"),
fill_color = "blue")
# parameter plots
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
#  pars=  c( "log_c_1", "log_c_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "prob[1]", "prob[2]","prob[3]"),
fill_color = "blue")
# parameter plots
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
# pars=  c( "log_c_1", "log_c_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "D_scale", "theta1[1]","theta1[2]","theta2[1]",
"log_catch_q"),
fill_color = "blue")
# parameter plots
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
# pars=  c( "log_c_1", "log_c_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "prob[1]", "prob[2]","prob[3]", "basal_p_1", "basal_p_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_catch_q", "log_F" ),
fill_color = "blue")
trace(bh_fit)
# parameter plots
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
# pars=  c( "log_c_1", "log_c_2"),
fill_color = "blue")
# parameter plots
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "g"),
fill_color = "blue")
posterior <- as.matrix(bh_fit)
View(posterior)
posterior <- as.matrix(bh_fit)
posterior[is.na(posterior)] <- 0
View(posterior)
mcmc_areas(posterior,
pars = c("D_scale", "theta1[1]","theta1[2]","theta2[1]"),
prob = 0.8) + plot_title
# bayesplot diagnostics =======
# need to remove NAs to use it
posterior <- as.matrix(bh_fit)
posterior[, !apply(is.na(posterior), 2, any)]
View(posterior)
mcmc_areas(posterior,
pars = c("D_scale", "theta1[1]","theta1[2]","theta2[1]"),
prob = 0.8) + plot_title
posterior[is.na(posterior)] <- 0
mcmc_areas(posterior,
pars = c("D_scale", "theta1[1]","theta1[2]","theta2[1]"),
prob = 0.8) + plot_title
mcmc_areas(posterior,
pars = c("D_scale", "theta1[1]","theta1[2]","theta2[1]"),
prob = 0.8)
# bayesplot diagnostics =======
# need to remove NAs to use it
posterior <- as.matrix(bh_fit)
posterior[colSums(!is.na(posterior)) > 0]
mcmc_areas(posterior,
pars = c("D_scale", "theta1[1]","theta1[2]","theta2[1]"),
prob = 0.8)
posterior<-posterior[colSums(!is.na(posterior)) > 0]
mcmc_areas(posterior,
pars = c("D_scale", "theta1[1]","theta1[2]","theta2[1]"),
prob = 0.8)
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "D_scale", "theta1[1]","theta1[2]","theta2[1]"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "prob[1]", "prob[2]","prob[3]", "basal_p_1", "basal_p_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_catch_q", "log_F" ),
fill_color = "blue")
# traceplot ========
traceplot(bh_fit,pars=  c( "prob[1]", "prob[2]","prob[3]", "basal_p_1", "basal_p_2"),
)
traceplot(bh_fit,pars=  c("log_F","log_catch_q","g"))
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "prob[1]", "prob[2]","prob[3]", "basal_p_1", "basal_p_2"),
fill_color = "blue")
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
N_sp_start = N_sp_start,
N_ocean_start = N_ocean_start,
N_egg_start = N_egg_start,
N_j_start =  N_j_start,
N_recruit_start = N_recruit_start,
N_e_sum_start = N_e_sum_start,
kappa_marine_start = basal_p_2,
kappa_j_start = basal_p_1,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov ,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# traceplot ========
traceplot(bh_fit,pars=  c( "D_scale", "theta1[1]","theta1[2]","theta2[1]"))
traceplot(bh_fit,pars=  c("prob[1]", "prob[2]","prob[3]", "basal_p_1", "basal_p_2"))
traceplot(bh_fit,pars=  c("log_F","log_catch_q","g"))
# need to remove NAs to use it
# posterior <- as.matrix(bh_fit)
# posterior[is.na(posterior)] <- 0
#
# mcmc_areas(posterior,
#            pars = c("D_scale", "theta1[1]","theta1[2]","theta2[1]"),
#            prob = 0.8)
# pairs =====
pairs(bh_fit)
# need to remove NAs to use it
# posterior <- as.matrix(bh_fit)
# posterior[is.na(posterior)] <- 0
#
# mcmc_areas(posterior,
#            pars = c("D_scale", "theta1[1]","theta1[2]","theta2[1]"),
#            prob = 0.8)
# pairs =====
pairs(bh_fit)
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "D_scale", "theta1[1]","theta1[2]","theta2[1]"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "D_scale", "theta1[1]","theta1[2]","theta2[1]"),
fill_color = "blue")
# traceplot ========
traceplot(bh_fit,pars=  c( "D_scale", "theta1[1]","theta1[2]","theta2[1]"))
traceplot(bh_fit,pars=  c("prob[1]", "prob[2]","prob[3]", "basal_p_1", "basal_p_2"))
traceplot(bh_fit,pars=  c("log_F","log_catch_q","g"))
exp(1)
exp(0)
exp(-1)
4^0.3
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "prob[1]", "prob[2]","prob[3]", "basal_p_1", "basal_p_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "D_scale", "theta1[1]","theta1[2]","theta2[1]"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "p_1"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "p_2"),
fill_color = "blue")
