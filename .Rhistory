dplyr::mutate(yukon_mean_discharge = as.numeric(scale(yukon_mean_discharge)),
SST_CDD_NBS = as.numeric(scale(SST_CDD_NBS))) %>%
dplyr::select(yukon_mean_discharge,SST_CDD_NBS) %>%
as.matrix()
library(rstan)
library(tidyverse)
library(here)
library(bayesplot)
library(rstanarm)
library(tidync)
library(lubridate)
library(readxl)
# Things to look into  =======================================================
# sigma for both life stages in estimates so I can fix it instead of have model estimate it
# Load data ==================================================================
# see 01_make salmon data.R for salmon data tidying
# see 02_make covariates for data tidying
# setup inputs ===============================================================
warmups <- 2000
total_iterations <- 4000
max_treedepth <-  15
n_chains <- 4
n_cores <- 4
adapt_delta <- 0.95
year_min = 2002
year_max_cal = 2022
year_max_brood = 2021
# load salmon data ==============================================
## Fall age comp ================================================
yukon_fall_obs_agecomp <- read_csv("data/processed_data/yukon_fall_age_comp.csv") %>%
filter(cal_year >= year_min,
cal_year <= 2022
) %>%
dplyr::select(2:ncol(.)) %>%
as.matrix()
## Spawners, Recruits, Harvest ====================================
yukon_fall_spawners <-read_csv("data/processed_data/yukon_fall_spawners.csv") %>%
filter(cal_year >= year_min #,
#cal_year <= year_max_cal
)%>%
select(2) %>%
as.vector()
yukon_fall_harvest<-read_csv("data/processed_data/yukon_fall_harvest.csv") %>%
filter(cal_year >= year_min#,
#cal_year <= year_max_cal
)%>%
select(2) %>%
as.vector()
yukon_fall_recruits<-read_csv("data/processed_data/yukon_fall_recruits.csv") %>%
filter(cal_year >= year_min#,
#cal_year <= year_max_cal
) %>%
select(2) %>%
as.vector()
## Fall Juveniles ================================================
fall_juv <- read_csv("data/processed_data/tidy_juv_fall_yukon.csv")  %>%
filter(Year <= 2021) %>% # 1 year less than all spawners
select(2) %>%
as.vector()
## Summer ================================================
# summer_age_comp<-read_csv("data/age_comps/processed_age_comps_summer_yukon.csv")  %>%
#   filter(!cal_year < 2005 )
# summer_brood <- read_csv("output/yukon_summer_broodyear.csv")%>%
#   filter(!brood_year < 2002) # for now to simplify matching with juveniles
# yukon_summer <- read_excel("data/Yukon_Escapement_ADFG/S Chum RR 2023.xlsx", sheet = 2) %>%
#   dplyr::select(1,11:14) %>%
#   janitor::row_to_names(row_number = 1) %>%
#   dplyr::rename(cal_year = "Year")  %>%
#   dplyr::mutate(age3=as.numeric(age3),
#                 age4=as.numeric(age4),
#                 age5=as.numeric(age5),
#                 age6=as.numeric(age6)) %>%
#   filter(!cal_year < 2005)
# ## harvest below weir
# harvest_escapement <- read_excel("data/Yukon_Escapement_ADFG/S Chum RR 2023.xlsx", sheet = 2) %>%
#   dplyr::select(1:2,4) %>%
#   janitor::row_to_names(row_number = 1)  %>%
#   dplyr::rename(cal_year = "Year") %>%
#   dplyr::mutate(cal_year = as.numeric(cal_year),
#          Harvest = as.numeric(Harvest),
#          Escapement = as.numeric(Escapement)) %>%
#   filter(!cal_year < 2005) %>% # from brood year 2002 (first year of juvenile data), the first year that fish could return is 2005 if its a 3yo, the last yera it coudl return is 2007 if its a 6yo.
#   as.data.frame()  #%>%
#  #as.matrix()
#  covariates =================
stage_a_cov <- read_csv("data/processed_covariates/stage_a_all.csv") %>%
filter(Year >= year_min,
Year <= year_max_brood
) %>%
dplyr::mutate(yukon_mean_discharge = as.numeric(scale(yukon_mean_discharge)),
SST_CDD_NBS = as.numeric(scale(SST_CDD_NBS))) %>%
dplyr::select(yukon_mean_discharge,SST_CDD_NBS) %>%
as.matrix()
stage_b_cov <- read_csv("data/processed_covariates/stage_b_all.csv") %>%
filter(Year >= year_min,
Year <= year_max_brood
) %>%
dplyr::mutate(SST_CDD_SEBS = as.numeric(scale(SST_CDD_SEBS))) %>%
dplyr::select(SST_CDD_SEBS
#,Chum_hatchery
) %>%
as.matrix()
# number covariates for each life stage
ncovars1 = 2
ncovars2 = 1
# Organize data call inputs ================================================
nByrs = nrow(fall_juv) # Number of BROOD years
nRyrs = nrow(yukon_fall_harvest)  # Number of CAL/RETURN
nRyrs_T = nRyrs + 4
A = 4 # number of age classes, 3,4,5,6
K = 1 # number of stocks
Ps = 0.5 # proportion of females - assumption, need to lit check
fs = as.vector(c(1800, 2000, 2200, 2440)) # fecundity - Gilk-Baumer 2009 estimate for Kusko Chum is: 2440. I added extra numbers temporarily just so that younger fish reproduce less, but will have to look up data for this more...
t_start = 5 # to fill starting values
# mean productivity rate =====
# estimating this now
basal_p_1 = 0.1#,0.05,
#0.05) # straight from simulation
basal_p_2 = 0.4#,
# 0.15,
# 0.15) # straight from simulation
# fix marine mortality =======
# generally low mortality in ocean for older life stages
M_fill_stan = c(0.06, 0.06, 0.06) # will be cumulative
#ess age comp =======
ess_age_comp = as.vector(rep(300, times = nByrs))
# STAN STARTING VALUES ==========
kappa_j_start =  basal_p_1
kappa_marine_start = basal_p_2
# N_j_start =  as.vector(NA)
# N_e_sum_start = as.vector(NA)
#
# N_recruit_start = matrix(NA,nrow=t_start, ncol=A)
# N_catch_start = matrix(NA,nrow=t_start, ncol=A)
#  N_egg_start = matrix(NA,nrow=t_start, ncol=A)
# N_ocean_start = matrix(NA,nrow=t_start, ncol=A)#vector() # ages # array(data = NA, dim = c(1, A))
# N_sp_start = matrix(NA,nrow=t_start, ncol=A)#vector() # array(data = NA, dim = c(1, A,K))
#
# N_j_start = exp(rnorm(1,15,2))
# N_e_sum_start = exp(rnorm(1,20,2)) #exp(rnorm(1,30,2))
# use average age comp to distribute starting values
p <- colMeans(yukon_fall_obs_agecomp[1:21,])
#
# for(t in 1:t_start){
#   N_recruit_start[t,] = exp(rnorm(1,12.9,2))*p
#   N_ocean_start[t,] = exp(rnorm(1,13,2))*p
#   N_sp_start[t,] = exp(rnorm(1,12.2,2))*p #exp(rnorm(1,log(398700),2))*p
#   N_catch_start[t,] = exp(rnorm(1,10.6,2))*p #exp(rnorm(1,log(27769),2))*p
#   N_egg_start[t,] = exp(rnorm(1,20,2))*p
# }
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
# N_sp_start = N_sp_start,
#N_catch_start = N_catch_start,
N_ocean_start = N_ocean_start,
N_egg_start = N_egg_start,
N_j_start =  N_j_start,
# N_recruit_start = N_recruit_start,
N_e_sum_start = N_e_sum_start,
kappa_marine_start = basal_p_2,
kappa_j_start = basal_p_1,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,#n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# Plot Observed vs Predicted ========
## Spawners ==========
pred_N_SP <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:25, each=4),
age = rep(1:4, length.out = nrow(.))) %>%
filter(!time>21) # remove years without full return estiamtes
# plt proportions
# sum to comarpe with data
summ_n_sp <- pred_N_SP %>%
group_by(time) %>%
summarise(pred_n_sp = sum(mean),
pred_se = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_sp)
ggplot(data = summ_n_sp) +
geom_point(aes(x=time, y = obs)) +
geom_line(aes(x=time, y = pred_n_sp)) +
geom_ribbon(aes(x=time, ymin = pred_n_sp-pred_se,
ymax = pred_n_sp+pred_se))
## recruits ======
pred_N_recruit <- summary(bh_fit, pars = c("N_recruit"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:25, each=4),
age = rep(1:4, length.out = nrow(.))) %>%
filter(!time>21)
# sum to compare with data
summ_n_rec <- pred_N_recruit %>%
group_by(time) %>%
summarise(pred_n_rec = sum(mean),
pred_se = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_return)
ggplot(data = summ_n_rec) +
geom_point(aes(x=time, y = obs)) +
geom_line(aes(x=time, y = pred_n_rec)) +
geom_ribbon(aes(x=time, ymin = pred_n_rec-pred_se,
ymax = pred_n_rec+pred_se))+
ggtitle(("Recruits, est and observed"))
## harvest ======
pred_N_harvest <- summary(bh_fit, pars = c("N_catch"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:25, each=4),
age = rep(1:4, length.out = nrow(.))) %>%
filter(!time>21)
# sum to compare with data
summ_n_harvest <- pred_N_harvest %>%
group_by(time) %>%
summarise(pred_n_harvest = sum(mean),
pred_se = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_harvest)
ggplot(data = summ_n_harvest) +
geom_point(aes(x=time, y = obs)) +
geom_line(aes(x=time, y = pred_n_harvest)) +
geom_ribbon(aes(x=time, ymin = pred_n_harvest-pred_se,
ymax = pred_n_harvest+pred_se))+
ggtitle(("Harvest, est and observed"))
## juveniles ======
# multiply by catch q to fit observations
catch_q <- summary(bh_fit, pars = c("log_catch_q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
mutate(mean = exp(mean))
pred_N_j <- summary(bh_fit, pars = c("N_j"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = 1:nrow(.))
# plot proportions
# sum to compare with data
summ_n_j <- pred_N_j %>%
dplyr::mutate(mean_J_Q = mean*catch_q$mean,
se_mean = se_mean*catch_q$mean) %>%
cbind(obs = data_list_stan$data_stage_j) #%>%
ggplot(data = summ_n_j) +
geom_point(aes(x=time, y = obs)) +
geom_line(aes(x=time, y = mean_J_Q)) +
geom_ribbon(aes(x=time, ymin = mean_J_Q-se_mean,
ymax = mean_J_Q+se_mean), alpha = 0.5)+
ggtitle(("Juveniles, est and observed"))
# plot time series of estimated fishing mortality ======
fishing <- summary(bh_fit, pars = c("log_F"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
mutate(mean = exp(mean),
time = 1:nrow(.))
ggplot(data = fishing) +
geom_line(aes(x=time, y = mean)) +
geom_ribbon(aes(x=time, ymin = mean-se_mean,
ymax = mean+se_mean), alpha = 0.5) +
ylab("Fm")
# plot  estimated survival ======
survival <- summary(bh_fit, pars = c("p_1", "p_2"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:20, length.out = nrow(.)),
variable = case_when(grepl("p_1",rowname) ~ "p_1",
TRUE ~ "p_2"))
ggplot(data = survival, aes(x=time, y = mean, group = variable ,color = variable)) +
geom_line( ) +
geom_ribbon(aes(x=time, ymin = mean-se_mean,
ymax = mean+se_mean), alpha = 0.5)
# plot age comp  ======
age_comp <- summary(bh_fit, pars = c("p"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
rename(pred = "mean") %>%
cbind(obs = data_list_stan$p_obs) %>%
dplyr::select(1,2,9) %>%
gather(2:3, key = "key", value = "value")
ggplot(data = age_comp) +
geom_point(aes(x= rowname, y = value, group = key, color = key)) +
theme_classic()
# PLOT PARAMS  ======================
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params <- summary(bh_fit, pars = c("log_c_1","log_c_2","log_catch_q",
"D_scale", "theta1", "theta2"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
dplyr::mutate(rowname = case_when(rowname == "theta1[1]"~ "theta1_1",
rowname == "theta1[2]"~ "theta1_2",
rowname == "theta2[1]"~ "theta2_1",
TRUE ~ rowname))
params %>%
ggplot() +
geom_linerange(aes(rowname, ymin = X10.,ymax = X90.)) +
geom_crossbar(aes(rowname, mean, ymin = X10.,ymax = X90.),  fill= 'grey') +
#geom_point(aes(x=rowname, y = mean_obs), color = "red") +
facet_wrap(~rowname, scales = 'free') #+
library(rstan)
library(tidyverse)
library(here)
library(bayesplot)
library(rstanarm)
library(tidync)
library(lubridate)
library(readxl)
# Things to look into  =======================================================
# sigma for both life stages in estimates so I can fix it instead of have model estimate it
# Load data ==================================================================
# see 01_make salmon data.R for salmon data tidying
# see 02_make covariates for data tidying
# setup inputs ===============================================================
warmups <- 2000
total_iterations <- 4000
max_treedepth <-  15
n_chains <- 4
n_cores <- 4
adapt_delta <- 0.95
year_min = 2002
year_max_cal = 2022
year_max_brood = 2021
# load salmon data ==============================================
## Fall age comp ================================================
yukon_fall_obs_agecomp <- read_csv("data/processed_data/yukon_fall_age_comp.csv") %>%
filter(cal_year >= year_min,
cal_year <= 2022
) %>%
dplyr::select(2:ncol(.)) %>%
as.matrix()
## Spawners, Recruits, Harvest ====================================
yukon_fall_spawners <-read_csv("data/processed_data/yukon_fall_spawners.csv") %>%
filter(cal_year >= year_min #,
#cal_year <= year_max_cal
)%>%
select(2) %>%
as.vector()
yukon_fall_harvest<-read_csv("data/processed_data/yukon_fall_harvest.csv") %>%
filter(cal_year >= year_min#,
#cal_year <= year_max_cal
)%>%
select(2) %>%
as.vector()
yukon_fall_recruits<-read_csv("data/processed_data/yukon_fall_recruits.csv") %>%
filter(cal_year >= year_min#,
#cal_year <= year_max_cal
) %>%
select(2) %>%
as.vector()
## Fall Juveniles ================================================
fall_juv <- read_csv("data/processed_data/tidy_juv_fall_yukon.csv")  %>%
filter(Year <= 2021) %>% # 1 year less than all spawners
select(2) %>%
as.vector()
## Summer ================================================
# summer_age_comp<-read_csv("data/age_comps/processed_age_comps_summer_yukon.csv")  %>%
#   filter(!cal_year < 2005 )
# summer_brood <- read_csv("output/yukon_summer_broodyear.csv")%>%
#   filter(!brood_year < 2002) # for now to simplify matching with juveniles
# yukon_summer <- read_excel("data/Yukon_Escapement_ADFG/S Chum RR 2023.xlsx", sheet = 2) %>%
#   dplyr::select(1,11:14) %>%
#   janitor::row_to_names(row_number = 1) %>%
#   dplyr::rename(cal_year = "Year")  %>%
#   dplyr::mutate(age3=as.numeric(age3),
#                 age4=as.numeric(age4),
#                 age5=as.numeric(age5),
#                 age6=as.numeric(age6)) %>%
#   filter(!cal_year < 2005)
# ## harvest below weir
# harvest_escapement <- read_excel("data/Yukon_Escapement_ADFG/S Chum RR 2023.xlsx", sheet = 2) %>%
#   dplyr::select(1:2,4) %>%
#   janitor::row_to_names(row_number = 1)  %>%
#   dplyr::rename(cal_year = "Year") %>%
#   dplyr::mutate(cal_year = as.numeric(cal_year),
#          Harvest = as.numeric(Harvest),
#          Escapement = as.numeric(Escapement)) %>%
#   filter(!cal_year < 2005) %>% # from brood year 2002 (first year of juvenile data), the first year that fish could return is 2005 if its a 3yo, the last yera it coudl return is 2007 if its a 6yo.
#   as.data.frame()  #%>%
#  #as.matrix()
#  covariates =================
stage_a_cov <- read_csv("data/processed_covariates/stage_a_all.csv") %>%
filter(Year >= year_min,
Year <= year_max_brood
) %>%
dplyr::mutate(yukon_mean_discharge = as.numeric(scale(yukon_mean_discharge)),
SST_CDD_NBS = as.numeric(scale(SST_CDD_NBS))) %>%
dplyr::select(yukon_mean_discharge,SST_CDD_NBS) %>%
as.matrix()
stage_b_cov <- read_csv("data/processed_covariates/stage_b_all.csv") %>%
filter(Year >= year_min,
Year <= year_max_brood
) %>%
dplyr::mutate(SST_CDD_SEBS = as.numeric(scale(SST_CDD_SEBS))) %>%
dplyr::select(SST_CDD_SEBS,Chum_hatchery) %>%
as.matrix()
# number covariates for each life stage
ncovars1 = 2
ncovars2 = 2
# Organize data call inputs ================================================
nByrs = nrow(fall_juv) # Number of BROOD years
nRyrs = nrow(yukon_fall_harvest)  # Number of CAL/RETURN
nRyrs_T = nRyrs + 4
A = 4 # number of age classes, 3,4,5,6
K = 1 # number of stocks
Ps = 0.5 # proportion of females - assumption, need to lit check
fs = as.vector(c(1800, 2000, 2200, 2440)) # fecundity - Gilk-Baumer 2009 estimate for Kusko Chum is: 2440. I added extra numbers temporarily just so that younger fish reproduce less, but will have to look up data for this more...
t_start = 5 # to fill starting values
# mean productivity rate =====
# estimating this now
basal_p_1 = 0.1#,0.05,
#0.05) # straight from simulation
basal_p_2 = 0.4#,
# 0.15,
# 0.15) # straight from simulation
# fix marine mortality =======
# generally low mortality in ocean for older life stages
M_fill_stan = c(0.06, 0.06, 0.06) # will be cumulative
#ess age comp =======
ess_age_comp = as.vector(rep(300, times = nByrs))
# STAN STARTING VALUES ==========
kappa_j_start =  basal_p_1
kappa_marine_start = basal_p_2
# N_j_start =  as.vector(NA)
# N_e_sum_start = as.vector(NA)
#
# N_recruit_start = matrix(NA,nrow=t_start, ncol=A)
# N_catch_start = matrix(NA,nrow=t_start, ncol=A)
#  N_egg_start = matrix(NA,nrow=t_start, ncol=A)
# N_ocean_start = matrix(NA,nrow=t_start, ncol=A)#vector() # ages # array(data = NA, dim = c(1, A))
# N_sp_start = matrix(NA,nrow=t_start, ncol=A)#vector() # array(data = NA, dim = c(1, A,K))
#
# N_j_start = exp(rnorm(1,15,2))
# N_e_sum_start = exp(rnorm(1,20,2)) #exp(rnorm(1,30,2))
# use average age comp to distribute starting values
p <- colMeans(yukon_fall_obs_agecomp[1:21,])
#
# for(t in 1:t_start){
#   N_recruit_start[t,] = exp(rnorm(1,12.9,2))*p
#   N_ocean_start[t,] = exp(rnorm(1,13,2))*p
#   N_sp_start[t,] = exp(rnorm(1,12.2,2))*p #exp(rnorm(1,log(398700),2))*p
#   N_catch_start[t,] = exp(rnorm(1,10.6,2))*p #exp(rnorm(1,log(27769),2))*p
#   N_egg_start[t,] = exp(rnorm(1,20,2))*p
# }
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
# N_sp_start = N_sp_start,
#N_catch_start = N_catch_start,
N_ocean_start = N_ocean_start,
N_egg_start = N_egg_start,
N_j_start =  N_j_start,
# N_recruit_start = N_recruit_start,
N_e_sum_start = N_e_sum_start,
kappa_marine_start = basal_p_2,
kappa_j_start = basal_p_1,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,#n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
