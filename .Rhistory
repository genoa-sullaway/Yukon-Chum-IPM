# scale_x_continuous(breaks = c(2002, 2005,2010, 2015,2020)) +
theme_classic() +
xlab("Brood Year") +
ylab("Est. Juv. Abundance\n (Millions)") +
theme(panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)#,color = "white"),
# axis.text.y = element_text(color = "white"),
# axis.title.y = element_text(color = "white"),
# axis.title.x = element_text(color = "white"),
# axis.ticks.y = element_line(color = "white"),
# axis.ticks.x = element_line(color = "white")
)
juv_plot
## save ========
obs_plot <- ggpubr::ggarrange(juv_plot,return_plot, nrow = 2, labels = c("a.", "b."))
obs_plot
ggsave("output/Plot_Manuscript_Juv_ReturnFit_Obs.png", width = 7, height = 4, bg = "transparent")
ggsave("output/Plot_Manuscript_Juv_ReturnFit_Obs.png", width = 7, height = 4)
return_plot <- ggplot(data = pred_return) +
geom_ribbon(aes(x=brood_year, ymin =ci_10/1000000,
ymax = ci_90/1000000),   fill =  "#2d9d92") +
geom_line(aes(x=brood_year, y = pred/1000000)#, color = "white"
) +
geom_errorbar(aes(x=brood_year, ymin = (obs-sd_obs)/1000000,
ymax = (obs+sd_obs)/1000000), width = 0.1) +
geom_point(aes(x=brood_year, y = obs/1000000) ) +
theme_classic() +
xlab("Brood Year") +
ylab("Est. Return Abundance\n(Millions)") +
scale_y_continuous(limits = c(0, 2500000/1000000)) +
theme(panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
axis.title.y = element_text(size = 10),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)
return_plot
juv_plot <- ggplot(data = pred_N_j) +
geom_ribbon(aes(x=brood_year, ymin =ci_10/1000000,
ymax = ci_90/1000000),   fill =  "#EAAA00") +
geom_line(aes(x=brood_year, y = mean_J_Q/1000000)) +
geom_errorbar(aes(x=brood_year, ymin = (obs-sd)/1000000,
ymax = (obs+sd)/1000000), width = 0.1, alpha = 0.6) +
geom_point(aes(x=brood_year, y = (obs)/1000000), alpha = 0.6) +
# geom_line(aes(x=brood_year, y = (obs)), color = "white" ) +
# scale_x_continuous(breaks = c(2002, 2005,2010, 2015,2020)) +
theme_classic() +
xlab("Brood Year") +
ylab("Est. Juv. Abundance\n (Millions)") +
theme(panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),#,color = "white"),
# axis.text.y = element_text(color = "white"),
axis.title.y = element_text(size = 10)
# axis.title.x = element_text(color = "white"),
# axis.ticks.y = element_line(color = "white"),
# axis.ticks.x = element_line(color = "white")
)
juv_plot
## save ========
obs_plot <- ggpubr::ggarrange(juv_plot,return_plot, nrow = 2, labels = c("a.", "b."))
obs_plot
ggsave("output/Plot_Manuscript_Juv_ReturnFit_Obs.png", width = 7, height = 4)
ggsave("output/Plot_Manuscript_Juv_ReturnFit_Obs.png", width = 7, height = 5)
obs_plot
ggsave("output/Plot_Manuscript_Juv_ReturnFit_Obs.png", width = 7, height = 5, bg="white")
theta_df <- as.data.frame(bh_fit, pars = c("theta1[1]", "theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:7, key = "rowname", value = "value") %>%
dplyr::mutate(variable = case_when(rowname=="theta1[1]" ~ "NBS July/August Temperature",
rowname== "theta1[2]" ~ "Yukon River - Mean Flow",
rowname=="theta1[3]" ~ "Pollock Recruitment",
rowname=="theta1[4]" ~ "Mean Spawner Size",
rowname=="theta2[1]" ~ "Aleutian Winter Temperature",
rowname=="theta2[2]" ~ "Chum Salmon Hatchery Release Abundance",
rowname=="theta2[3]" ~ "Pink Salmon Hatchery Release Abundance",
rowname=="theta2[4]" ~ "Fullness Index"),
variable = factor(variable, levels = rev(c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size",
"Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index"))),
stage = case_when(variable %in% c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size") ~ "Juvenile",
variable %in% c( "Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index") ~ "Marine")) %>%
group_by(stage,variable) %>%
dplyr::summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high))
theta_df <- as.data.frame(bh_fit, pars = c("theta1[1]", "theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:7, key = "rowname", value = "value") %>%
dplyr::mutate(variable = case_when(rowname=="theta1[1]" ~ "NBS July/August Temperature",
rowname== "theta1[2]" ~ "Yukon River - Mean Flow",
rowname=="theta1[3]" ~ "Pollock Recruitment",
rowname=="theta1[4]" ~ "Mean Spawner Size",
rowname=="theta2[1]" ~ "Aleutian Winter Temperature",
rowname=="theta2[2]" ~ "Chum Salmon Hatchery Release Abundance",
rowname=="theta2[3]" ~ "Pink Salmon Hatchery Release Abundance",
rowname=="theta2[4]" ~ "Fullness Index"),
variable = factor(variable, levels = rev(c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size",
"Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index"))),
stage = case_when(variable %in% c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size") ~ "Juvenile",
variable %in% c( "Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index") ~ "Marine")) %>%
group_by(stage,variable) %>%
dplyr::summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high))
ggplot(data = theta_df,
aes(x= mean, y = variable,
group = variable, color = stage)) +
geom_errorbar(aes(xmin =ci_95_low, xmax = ci_95_high),width = 0, linewidth = 0.5, color = "black") +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =ci_80_low, xmax = ci_80_high), linewidth = 1, width = 0) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
geom_vline(xintercept=0)+
facet_wrap(~stage, scales = "free_y", ncol = 1) +
ggtitle("Covariate Coefficients")+
ylab("")
theta_plot <- ggplot(data = theta_df,
aes(x= mean, y = variable,
group = variable, color = stage)) +
geom_errorbar(aes(xmin =ci_95_low, xmax = ci_95_high),
width = 0, linewidth = 0.5 ) +
geom_point(size = 2) +
geom_errorbar(aes(xmin =ci_80_low, xmax = ci_80_high), linewidth = 1.5, width = 0) +
theme_classic() +
scale_color_manual(values =c("#EAAA00", "#2d9d92")) +
theme(panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),#"none",
strip.text = element_blank( ),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1 ),
# axis.text.y = element_text(color = "white"),
# axis.title.y = element_text(color = "white"),
# axis.title.x = element_text(color = "white"),
# axis.ticks.y = element_line(color = "white"),
# axis.ticks.x = element_line(color = "white"),
panel.spacing.y=unit(0, "lines")) +
geom_vline(xintercept=0 )+
ylab("") +
xlab("Mean Covariate Coefficient Value") +
facet_wrap(~stage, scales = "free_y", ncol = 1)
theta_plot
theta_df <- as.data.frame(bh_fit, pars = c("theta1[1]", "theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:8, key = "rowname", value = "value") %>%
dplyr::mutate(variable = case_when(rowname=="theta1[1]" ~ "NBS July/August Temperature",
rowname== "theta1[2]" ~ "Yukon River - Mean Flow",
rowname=="theta1[3]" ~ "Pollock Recruitment",
rowname=="theta1[4]" ~ "Mean Spawner Size",
rowname=="theta2[1]" ~ "Aleutian Winter Temperature",
rowname=="theta2[2]" ~ "Chum Salmon Hatchery Release Abundance",
rowname=="theta2[3]" ~ "Pink Salmon Hatchery Release Abundance",
rowname=="theta2[4]" ~ "Fullness Index"),
variable = factor(variable, levels = rev(c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size",
"Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index"))),
stage = case_when(variable %in% c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size") ~ "Juvenile",
variable %in% c( "Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index") ~ "Marine")) %>%
group_by(stage,variable) %>%
dplyr::summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high))
theta_plot <- ggplot(data = theta_df,
aes(x= mean, y = variable,
group = variable, color = stage)) +
geom_errorbar(aes(xmin =ci_95_low, xmax = ci_95_high),
width = 0, linewidth = 0.5 ) +
geom_point(size = 2) +
geom_errorbar(aes(xmin =ci_80_low, xmax = ci_80_high), linewidth = 1.5, width = 0) +
theme_classic() +
scale_color_manual(values =c("#EAAA00", "#2d9d92")) +
theme(panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),#"none",
strip.text = element_blank( ),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1 ),
# axis.text.y = element_text(color = "white"),
# axis.title.y = element_text(color = "white"),
# axis.title.x = element_text(color = "white"),
# axis.ticks.y = element_line(color = "white"),
# axis.ticks.x = element_line(color = "white"),
panel.spacing.y=unit(0, "lines")) +
geom_vline(xintercept=0 )+
ylab("") +
xlab("Mean Covariate Coefficient Value") +
facet_wrap(~stage, scales = "free_y", ncol = 1)
theta_plot
theta_df <- as.data.frame(bh_fit, pars = c("theta1[1]", "theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:8, key = "rowname", value = "value") %>%
dplyr::mutate(variable = case_when(rowname=="theta1[1]" ~ "NBS July/August Temperature",
rowname== "theta1[2]" ~ "Yukon River - Mean Flow",
rowname=="theta1[3]" ~ "Pollock Recruitment",
rowname=="theta1[4]" ~ "Mean Spawner Size",
rowname=="theta2[1]" ~ "Aleutian Winter Temperature",
rowname=="theta2[2]" ~ "Chum Salmon Hatchery Release Abundance",
rowname=="theta2[3]" ~ "Pink Salmon Hatchery Release Abundance",
rowname=="theta2[4]" ~ "Fullness Index"),
variable = factor(variable, levels = rev(c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size",
"Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index"))),
stage = case_when(variable %in% c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size") ~ "Juvenile",
variable %in% c( "Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index") ~ "Marine")) %>%
group_by(stage,variable) %>%
dplyr::summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.65)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.65)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high))
theta_plot <- ggplot(data = theta_df,
aes(x= mean, y = variable,
group = variable, color = stage)) +
geom_errorbar(aes(xmin =ci_95_low, xmax = ci_95_high),
width = 0, linewidth = 0.5 ) +
geom_point(size = 2) +
geom_errorbar(aes(xmin =ci_80_low, xmax = ci_80_high), linewidth = 1.5, width = 0) +
theme_classic() +
scale_color_manual(values =c("#EAAA00", "#2d9d92")) +
theme(panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),#"none",
strip.text = element_blank( ),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1 ),
# axis.text.y = element_text(color = "white"),
# axis.title.y = element_text(color = "white"),
# axis.title.x = element_text(color = "white"),
# axis.ticks.y = element_line(color = "white"),
# axis.ticks.x = element_line(color = "white"),
panel.spacing.y=unit(0, "lines")) +
geom_vline(xintercept=0 )+
ylab("") +
xlab("Mean Covariate Coefficient Value") +
facet_wrap(~stage, scales = "free_y", ncol = 1)
theta_plot
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
library(tidyverse)
library(tidybayes)
library(here)
library(bayesplot)
library(bayestestR)
# load model ==============
bh_fit <- read_rds("output/stan_fit_DATA.RDS")
theta_df <- as.data.frame(bh_fit, pars = c("theta1[1]", "theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:8, key = "rowname", value = "value") %>%
dplyr::mutate(variable = case_when(rowname=="theta1[1]" ~ "NBS July/August Temperature",
rowname== "theta1[2]" ~ "Yukon River - Mean Flow",
rowname=="theta1[3]" ~ "Pollock Recruitment",
rowname=="theta1[4]" ~ "Mean Spawner Size",
rowname=="theta2[1]" ~ "Aleutian Winter Temperature",
rowname=="theta2[2]" ~ "Chum Salmon Hatchery Release Abundance",
rowname=="theta2[3]" ~ "Pink Salmon Hatchery Release Abundance",
rowname=="theta2[4]" ~ "Fullness Index"),
variable = factor(variable, levels = rev(c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size",
"Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index"))),
stage = case_when(variable %in% c("NBS July/August Temperature",
"Yukon River - Mean Flow",
"Pollock Recruitment",
"Mean Spawner Size") ~ "Juvenile",
variable %in% c( "Aleutian Winter Temperature",
"Chum Salmon Hatchery Release Abundance",
"Pink Salmon Hatchery Release Abundance",
"Fullness Index") ~ "Marine")) %>%
group_by(stage,variable) %>%
dplyr::summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.65)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.65)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high))
theta_plot <- ggplot(data = theta_df,
aes(x= mean, y = variable,
group = variable, color = stage)) +
geom_errorbar(aes(xmin =ci_95_low, xmax = ci_95_high),
width = 0, linewidth = 0.5 ) +
geom_point(size = 2) +
geom_errorbar(aes(xmin =ci_80_low, xmax = ci_80_high), linewidth = 1.5, width = 0) +
theme_classic() +
scale_color_manual(values =c("#EAAA00", "#2d9d92")) +
theme(panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),#"none",
strip.text = element_blank( ),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1 ),
# axis.text.y = element_text(color = "white"),
# axis.title.y = element_text(color = "white"),
# axis.title.x = element_text(color = "white"),
# axis.ticks.y = element_line(color = "white"),
# axis.ticks.x = element_line(color = "white"),
panel.spacing.y=unit(0, "lines")) +
geom_vline(xintercept=0 )+
ylab("") +
xlab("Mean Covariate Coefficient Value") +
facet_wrap(~stage, scales = "free_y", ncol = 1)
theta_plot
library(tidyverse)
library(tidybayes)
library(here)
library(rstan)
library(bayesplot)
library(rstanarm)
# load model ==============
bh_fit<- read_rds("output/stan_fit_DATA.RDS")
# bh_fit <- read_rds("output/stan_fit_DATA_forAFS.RDS")
# bh_fit <- read_rds("output/stan_fit_DATA_nocovar.RDS")
# year DF for joins ==================
years <-read_csv("data/processed_data/yukon_fall_spawners.csv") %>%
filter(cal_year >= year_min) %>%
dplyr::select(cal_year) %>%
dplyr::mutate(time = c(1:nrow(.)))
# traceplot ========
traceplot(bh_fit,pars=  c( "theta1[1]" ,"theta1[2]" ,"theta1[3]" ,"theta1[4]" ,
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"))
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"
),
fill_color = "blue")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"
),
fill_color = "blue")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
plot(bh_fit, show_density = TRUE, ci_level = 0.89,
pars=  c( "theta_1_1_pp","theta_1_2_pp","theta_1_3_pp","theta_1_4_pp",
"theta_2_1_pp","theta_2_2_pp","theta_2_3_pp","theta_2_4_pp"),
fill_color = "blue")
plot(bh_fit, show_density = TRUE, ci_level = 0.5,
pars=  c( "theta_1_1_pp","theta_1_2_pp","theta_1_3_pp","theta_1_4_pp",
"theta_2_1_pp","theta_2_2_pp","theta_2_3_pp","theta_2_4_pp"),
fill_color = "blue")
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta_1_1_pp","theta_1_2_pp","theta_1_3_pp","theta_1_4_pp",
"theta_2_1_pp","theta_2_2_pp","theta_2_3_pp","theta_2_4_pp"),
fill_color = "blue")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta_1_1_pp","theta_1_2_pp","theta_1_3_pp","theta_1_4_pp",
"theta_2_1_pp","theta_2_2_pp","theta_2_3_pp","theta_2_4_pp"),
fill_color = "blue")
plot(bh_fit, show_density = TRUE, ci_level = 0.5,
pars=  c( "theta_1_1_pp","theta_1_2_pp","theta_1_3_pp","theta_1_4_pp",
"theta_2_1_pp","theta_2_2_pp","theta_2_3_pp","theta_2_4_pp"),
fill_color = "blue")
