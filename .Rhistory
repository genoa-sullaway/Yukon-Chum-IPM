kappa_j_start = kappa_j_start,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p,
c_1 = exp(20),
c_2 = exp(18),
basal_p_1 =basal_p_1,
basal_p_2 = basal_p_2)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# Plot Observed vs Predicted ========
## Spawners ==========
pred_N_SP <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
filter(!time>21) %>% # remove years without full return estimates
left_join(years)
# plot proportions
# sum to compare with data
summ_n_sp <- pred_N_SP %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_sp) %>%
mutate(rowname = "sp")
ggplot(data = summ_n_sp) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean)) +
ggtitle("spawners: obs and predicted")+
scale_x_continuous(breaks = c(2002, 2006,2010, 2015,2020))
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_sp_cv = spawner_cv$fall_spawner_cv,
data_recruit_cv = spawner_cv$summer_recruit_cv,
#  data_j_cv = fall_juv_cv$CV,
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
# N_ocean_start = N_ocean_start,
# N_egg_start = N_egg_start,
# N_j_start =  N_j_start,
# N_e_sum_start = N_e_sum_start,
kappa_marine_mort_start = -log(kappa_marine_start),
kappa_marine_start = kappa_marine_start,
kappa_j_start = kappa_j_start,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p,
c_1 = exp(17),
c_2 = exp(16),
basal_p_1 =basal_p_1,
basal_p_2 = basal_p_2)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
plot(bh_fit, show_density = FALSE, ci_level = 0.95, na.rm = TRUE,
pars=  c( "kappa_j_survival"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,  na.rm = TRUE,
pars=  c( "kappa_marine_survival"),
fill_color = "blue")
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]",#"theta1[2]","theta1[3]","theta1[4]",
"theta2[1]"#,"theta2[2]"#,"theta2[3]"
),
fill_color = "blue")
#
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "p_1" ),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "p_2"),
fill_color = "blue")
# Plot Observed vs Predicted ========
## Spawners ==========
pred_N_SP <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
filter(!time>21) %>% # remove years without full return estimates
left_join(years)
# plot proportions
# sum to compare with data
summ_n_sp <- pred_N_SP %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_sp) %>%
mutate(rowname = "sp")
ggplot(data = summ_n_sp) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean)) +
ggtitle("spawners: obs and predicted")+
scale_x_continuous(breaks = c(2002, 2006,2010, 2015,2020))
## juveniles ======
# multiply by catch q to fit observations
catch_q <- summary(bh_fit, pars = c("log_catch_q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
mutate(mean = exp(mean))
pred_N_j <- summary(bh_fit, pars = c("N_j"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = 1:nrow(.)) %>%
filter(!time==22) %>%
left_join(years)
# plot proportions
# sum to compare with data
summ_n_j <- pred_N_j %>%
dplyr::mutate(mean_J_Q = mean*catch_q$mean,
se_mean = se_mean*catch_q$mean) %>%
cbind(obs = data_list_stan$data_stage_j) %>%
mutate(rowname = "juv") #%>%
ggplot(data = summ_n_j) +
geom_line(aes(x=cal_year, y = mean)) +
# geom_line(aes(x=time, y = mean), color = "green") +
# geom_ribbon(aes(x=time, ymin = mean_J_Q-se_mean,
#                 ymax = mean_J_Q+se_mean), alpha = 0.5)+
ggtitle(("Juveniles, est "))
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "N_first_winter_start_log",
"N_j_start_log",
"N_sp_start_log",
"N_egg_start_log",
"N_recruit_start_log"),
fill_color = "blue")
# Plot Observed vs Predicted ========
## Spawners ==========
pred_N_SP <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
filter(!time>21) %>% # remove years without full return estimates
left_join(years)
# plot proportions
# sum to compare with data
summ_n_sp <- pred_N_SP %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_sp) %>%
mutate(rowname = "sp")
ggplot(data = summ_n_sp) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean)) +
ggtitle("spawners: obs and predicted")+
scale_x_continuous(breaks = c(2002, 2006,2010, 2015,2020))
plot(bh_fit, show_density = FALSE, ci_level = 0.95, na.rm = TRUE,
pars=  c( "kappa_j_survival"),
fill_color = "blue")
# calculate SR based one stiamted values========
test <- summary(bh_fit, pars = c("kappa_j_survival", "p_1", "N_egg_start_log"),
probs = c(0.1, 0.9))$summary
View(test)
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_sp_cv = spawner_cv$fall_spawner_cv,
data_recruit_cv = spawner_cv$summer_recruit_cv,
#  data_j_cv = fall_juv_cv$CV,
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
# N_ocean_start = N_ocean_start,
# N_egg_start = N_egg_start,
# N_j_start =  N_j_start,
# N_e_sum_start = N_e_sum_start,
kappa_marine_mort_start = -log(kappa_marine_start),
kappa_marine_start = kappa_marine_start,
kappa_j_start = kappa_j_start,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p,
c_1 = exp(17),
c_2 = exp(16),
basal_p_1 =basal_p_1,
basal_p_2 = basal_p_2)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_sp_cv = spawner_cv$fall_spawner_cv,
data_recruit_cv = spawner_cv$summer_recruit_cv,
#  data_j_cv = fall_juv_cv$CV,
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
# N_ocean_start = N_ocean_start,
# N_egg_start = N_egg_start,
# N_j_start =  N_j_start,
# N_e_sum_start = N_e_sum_start,
kappa_marine_mort_start = -log(kappa_marine_start),
kappa_marine_start = kappa_marine_start,
kappa_j_start = kappa_j_start,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p,
c_1 = exp(17),
c_2 = exp(16),
basal_p_1 =basal_p_1,
basal_p_2 = basal_p_2)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_sp_cv = spawner_cv$fall_spawner_cv,
data_recruit_cv = spawner_cv$summer_recruit_cv,
#  data_j_cv = fall_juv_cv$CV,
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
# N_ocean_start = N_ocean_start,
# N_egg_start = N_egg_start,
# N_j_start =  N_j_start,
# N_e_sum_start = N_e_sum_start,
kappa_marine_mort_start = -log(kappa_marine_start),
kappa_marine_start = kappa_marine_start,
kappa_j_start = kappa_j_start,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p,
c_1 = exp(17),
c_2 = exp(16),
basal_p_1 =basal_p_1,
basal_p_2 = basal_p_2)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
plot(bh_fit, show_density = FALSE, ci_level = 0.95, na.rm = TRUE,
pars=  c( "kappa_j_survival"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,  na.rm = TRUE,
pars=  c( "kappa_marine_survival"),
fill_color = "blue")
# Plot Observed vs Predicted ========
## Spawners ==========
pred_N_SP <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
filter(!time>21) %>% # remove years without full return estimates
left_join(years)
# plot proportions
# sum to compare with data
summ_n_sp <- pred_N_SP %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_sp) %>%
mutate(rowname = "sp")
ggplot(data = summ_n_sp) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean)) +
ggtitle("spawners: obs and predicted")+
scale_x_continuous(breaks = c(2002, 2006,2010, 2015,2020))
## recruits ======
pred_N_recruit <- summary(bh_fit, pars = c("N_recruit"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
filter(!time>21)
# plot proportions  ======
# sum to compare with data
summ_n_rec <- pred_N_recruit %>%
group_by(time) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_return)  %>%
mutate(rowname = "recruit")
ggplot(data = summ_n_rec) +
geom_point(aes(x=time, y = obs)) +
geom_line(aes(x=time, y = mean)) +
geom_ribbon(aes(x=time, ymin = mean-se_mean,
ymax = mean+se_mean))+
ggtitle(("recruits: obs and predicted"))
## harvest ======
pred_N_harvest <- summary(bh_fit, pars = c("N_catch"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
filter(!time>21)
# plt proportions
# sum to compare with data
summ_n_harvest <- pred_N_harvest %>%
group_by(time) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
cbind(obs = data_list_stan$data_stage_harvest)  %>%
mutate(rowname = "harvest")
ggplot(data = summ_n_harvest) +
geom_point(aes(x=time, y = obs)) +
geom_line(aes(x=time, y = mean)) +
geom_ribbon(aes(x=time, ymin = mean-se_mean,
ymax = mean+se_mean))+
ggtitle(("Harvest, est and observed"))
## juveniles ======
# multiply by catch q to fit observations
catch_q <- summary(bh_fit, pars = c("log_catch_q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
mutate(mean = exp(mean))
pred_N_j <- summary(bh_fit, pars = c("N_j"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = 1:nrow(.)) %>%
filter(!time==22) %>%
left_join(years)
# plot proportions
# sum to compare with data
summ_n_j <- pred_N_j %>%
dplyr::mutate(mean_J_Q = mean*catch_q$mean,
se_mean = se_mean*catch_q$mean) %>%
cbind(obs = data_list_stan$data_stage_j) %>%
mutate(rowname = "juv") #%>%
ggplot(data = summ_n_j) +
geom_line(aes(x=cal_year, y = mean)) +
# geom_line(aes(x=time, y = mean), color = "green") +
# geom_ribbon(aes(x=time, ymin = mean_J_Q-se_mean,
#                 ymax = mean_J_Q+se_mean), alpha = 0.5)+
ggtitle(("Juveniles, est "))
ggplot(data = summ_n_j) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean_J_Q)) +
# geom_line(aes(x=time, y = mean), color = "green") +
geom_ribbon(aes(x=cal_year, ymin = mean_J_Q-se_mean,
ymax = mean_J_Q+se_mean), alpha = 0.5)+
ggtitle(("Juveniles, est and observed"))
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]",#"theta1[2]","theta1[3]","theta1[4]",
"theta2[1]"#,"theta2[2]"#,"theta2[3]"
),
fill_color = "blue")
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_sp_cv = spawner_cv$fall_spawner_cv,
data_recruit_cv = spawner_cv$summer_recruit_cv,
#  data_j_cv = fall_juv_cv$CV,
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
# N_ocean_start = N_ocean_start,
# N_egg_start = N_egg_start,
# N_j_start =  N_j_start,
# N_e_sum_start = N_e_sum_start,
kappa_marine_mort_start = -log(kappa_marine_start),
kappa_marine_start = kappa_marine_start,
kappa_j_start = kappa_j_start,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p,
c_1 = exp(17),
c_2 = exp(16),
basal_p_1 =basal_p_1,
basal_p_2 = basal_p_2)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
