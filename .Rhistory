chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# traceplot ========
traceplot(bh_fit,pars=  c( "theta1[1]" ,"theta1[2]" ,"theta1[3]" ,"theta1[4]" ,
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"))
# Plot Observed vs Predicted ========
## Spawners ==========
pred_N_SP <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:26, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
# filter(!time>20) %>% # remove years without full return estimates
left_join(years)
# sum to compare with data
summ_n_sp <- pred_N_SP %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
sd = mean(sd)) %>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_sp),
obs = c(data_list_stan$data_stage_sp))) %>%
dplyr::mutate(rowname = "sp")
ggplot(data = summ_n_sp) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_errorbar(aes(x=cal_year, ymin = mean-sd, ymax = mean+sd),
width = 0.1)+
ggtitle("Spawners: obs and predicted")+
scale_x_continuous(breaks = c(2002, 2006,2010, 2015,2020)) +
theme_classic()
#diagnostics[,"n_eff"] > 400 &
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]","theta1[5]",#"theta1[6]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"
),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_c_1" ),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_c_2" ),
fill_color = "blue")
summary(fit)$summary[,c("log_c_2", "log_c_1")]
summary(fit)$summary[,c("log_c_2", "log_c_1")]
summary(fit)$summary
test <- summary(fit)$summary
View(test)
# For a specific parameter (e.g., 'beta'):
params <- extract(fit, pars = c('log_c_2', 'log_c_1'))
# For a specific parameter (e.g., 'beta'):
params <- extract(fit, pars = c("log_c_2", "log_c_1"))
# For a specific parameter (e.g., 'beta'):
params <- rstanarm::extract(fit, pars = c("log_c_2", "log_c_1"))
# For a specific parameter (e.g., 'beta'):
params <- rstan::extract(fit, pars = c("log_c_2", "log_c_1"))
# For a specific parameter (e.g., 'beta'):
params <- rstan::extract(bh_fit, pars = c("log_c_2", "log_c_1"))
View(params)
# For a specific parameter (e.g., 'beta'):
params <- data.frame(rstan::extract(bh_fit, pars = c("log_c_2", "log_c_1")))
# You can also use rstan's built-in functions:
get_posterior_mean(bh_fit, pars = 'log_c_2')
# You can also use rstan's built-in functions:
t <- get_posterior_mean(bh_fit, pars = 'log_c_2')
t
View(t)
quantile(params$log_c_2, probs = c(0.025, 0.975))  # 95% credible interval
t<-quantile(params$log_c_2, probs = c(0.025, 0.975))  # 95% credible interval
t
View(t)
# You can also use rstan's built-in functions:
t <- get_posterior_mean(bh_fit, pars = 'log_c_1')
View(t)
t<-quantile(params$log_c_1, probs = c(0.025, 0.975))  # 95% credible interval
View(t)
t <- get_posterior_mean(bh_fit, pars = 'basal_p_2')
View(t)
#diagnostics[,"n_eff"] > 400 &
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]","theta1[5]",#"theta1[6]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"
),
fill_color = "blue")
# ggsave("output/return_est_plot.png", width = 7, height = 4, bg = "transparent")
# plot with different confidence intervals=====
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.65)$CI_low),
pred_return <- summary(bh_fit, pars = c("N_brood_year_return"))
View(pred_return)
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.))
View(pred_return)
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value")
View(pred_return)
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high))
View(pred_return)
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-1,-3))
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-1,-4))
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1))
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(year) %>%
mutate(brood_year = c(seq(2002:2021)))
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(year) %>%
dplyr::mutate(brood_year = c(seq(2002:2021)))
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
# arrange(year) %>%
dplyr::mutate(brood_year = c(seq(2002:2021)))
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(seq(2002:2021)))
seq(2002:2021)
# ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.65)$CI_low),
pred_return <- as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021))
ggplot(data = pred_return) +
geom_ribbon(aes(x=brood_year, ymin =ci_95_low/1000000,
ymax = ci_95_high/1000000),   fill =  "#2d9d92") +
geom_line(aes(x=brood_year, y = mean/1000000)#, color = "white"
)
pred_return <-  as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021))
pred_return <-  as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021)) %>%
left_join(data.frame(time = c(1:17),
brood_year = c(2002:2018),
obs = c(yukon_fall_return_brood_year$Brood_Year_Return))) %>% # data_list_stan$data_stage_return[1:nrow(.)])) %>%
left_join(adult_cvs) %>%
dplyr::select(brood_year,obs, fall_spawner_cv,
X10.,X90., mean,ci_95_low,ci_95_high) %>%
dplyr::mutate(sd_obs =   (fall_spawner_cv*obs))
# return  ======
adult_cvs <- read_xlsx("data/chum_cv.xlsx") %>%
dplyr::select(year,fall_spawner_cv) %>%
dplyr::mutate(brood_year = year-3)
pred_return <-  as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021)) %>%
left_join(data.frame(time = c(1:17),
brood_year = c(2002:2018),
obs = c(yukon_fall_return_brood_year$Brood_Year_Return))) %>% # data_list_stan$data_stage_return[1:nrow(.)])) %>%
left_join(adult_cvs) %>%
dplyr::select(brood_year,obs, fall_spawner_cv,
X10.,X90., mean,ci_95_low,ci_95_high) %>%
dplyr::mutate(sd_obs =   (fall_spawner_cv*obs))
pred_return <-  as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021)) %>%
left_join(data.frame(time = c(1:17),
brood_year = c(2002:2018),
obs = c(yukon_fall_return_brood_year$Brood_Year_Return)))
View(pred_return)
# return  ======
adult_cvs <- read_xlsx("data/chum_cv.xlsx") %>%
dplyr::select(year,fall_spawner_cv) %>%
dplyr::mutate(brood_year = year-3)
# return  ======
adult_cvs <- read_xlsx("data/chum_cv.xlsx") %>%
dplyr::mutate(brood_year = year-3) %>%
dplyr::select(brood_year,fall_spawner_cv)
pred_return <-  as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021)) %>%
left_join(data.frame(time = c(1:17),
brood_year = c(2002:2018),
obs = c(yukon_fall_return_brood_year$Brood_Year_Return))) %>% # data_list_stan$data_stage_return[1:nrow(.)])) %>%
left_join(adult_cvs) %>%
dplyr::select(brood_year,obs, fall_spawner_cv,
X10.,X90., mean,ci_95_low,ci_95_high) %>%
dplyr::mutate(sd_obs =   (fall_spawner_cv*obs))
pred_return <-  as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021)) %>%
left_join(data.frame(time = c(1:17),
brood_year = c(2002:2018),
obs = c(yukon_fall_return_brood_year$Brood_Year_Return))) %>% # data_list_stan$data_stage_return[1:nrow(.)])) %>%
left_join(adult_cvs) %>%
dplyr::select(brood_year,obs, fall_spawner_cv,
mean,ci_95_low,ci_95_high) %>%
dplyr::mutate(sd_obs =   (fall_spawner_cv*obs))
return_plot <- ggplot(data = pred_return) +
geom_ribbon(aes(x=brood_year, ymin =ci_95_low/1000000,
ymax = ci_95_high/1000000),   fill =  "#2d9d92") +
geom_line(aes(x=brood_year, y = pred/1000000)#, color = "white"
) +
geom_errorbar(aes(x=brood_year, ymin = (obs-sd_obs)/1000000,
ymax = (obs+sd_obs)/1000000), width = 0.1) +
geom_point(aes(x=brood_year, y = obs/1000000) ) +
theme_classic() +
xlab("Brood Year") +
ylab("Est. Return Abundance\n(Millions)") +
scale_y_continuous(limits = c(0, 2500000/1000000)) +
theme(panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
axis.title.y = element_text(size = 10),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)
return_plot
return_plot <- ggplot(data = pred_return) +
geom_ribbon(aes(x=brood_year, ymin =ci_95_low/1000000,
ymax = ci_95_high/1000000),   fill =  "#2d9d92") +
geom_line(aes(x=brood_year, y = mean/1000000)#, color = "white"
) +
geom_errorbar(aes(x=brood_year, ymin = (obs-sd_obs)/1000000,
ymax = (obs+sd_obs)/1000000), width = 0.1) +
geom_point(aes(x=brood_year, y = obs/1000000) ) +
theme_classic() +
xlab("Brood Year") +
ylab("Est. Return Abundance\n(Millions)") +
scale_y_continuous(limits = c(0, 2500000/1000000)) +
theme(panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
axis.title.y = element_text(size = 10),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)
return_plot
catch_q <- as.data.frame(bh_fit, pars = c("log_catch_q"))
View(catch_q)
catch_q <- as.data.frame(bh_fit, pars = c("log_catch_q")) %>%
summarise(mean = exp(mean(log_catch_q)),
ci_80_low = exp(as.numeric(ci(log_catch_q, method = "HDI", ci = 0.80)$CI_low)),
ci_80_high = exp(as.numeric(ci(log_catch_q, method = "HDI", ci = 0.80)$CI_high)),
ci_95_low = exp(as.numeric(ci(log_catch_q, method = "HDI", ci = 0.95)$CI_low)),
ci_95_high = exp(as.numeric(ci(log_catch_q, method = "HDI", ci = 0.95)$CI_high)))
View(catch_q)
pred_N_j <- as.data.frame(bh_fit, pars = c("N_j")) %>%
# summary(bh_fit, pars = c("N_j"),
#                   probs = c(0.1, 0.9))$summary %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021))
View(pred_N_j)
# Juveniles PP ======
# multiply by catch q to fit observations
juv_obs <-read_csv("data/processed_data/tidy_juv_fall_yukon.csv") %>%
dplyr::mutate(brood_year = Year - 1,
time = as.numeric(1:nrow(.)),
obs = (fall_abund),
sd = Std..Error.for.Estimate ) %>% #(CV*obs)) %>%
filter(!Year %in% c(2020, 2008,2013)) %>%
dplyr::select(brood_year,obs,sd)
catch_q <- summary(bh_fit, pars = c("log_catch_q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
mutate(mean = exp(mean))
catch_q <- as.data.frame(bh_fit, pars = c("log_catch_q")) %>%
dplyr::summarise(mean = exp(mean(log_catch_q)))
pred_N_j <- as.data.frame(bh_fit, pars = c("N_j")) %>%
dplyr::mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
dplyr::summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.95)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021)) %>%
left_join(juv_obs, by = "brood_year")
catch_q <- as.data.frame(bh_fit, pars = c("log_catch_q")) %>%
dplyr::mutate(catch_q = exp(log_catch_q))
pred_N_j <- as.data.frame(bh_fit, pars = c("N_j")) %>%
dplyr::mutate(draw = 1:nrow(.)) %>%
rbind(catch_q)
pred_N_j <- as.data.frame(bh_fit, pars = c("N_j")) %>%
dplyr::mutate(draw = 1:nrow(.)) %>%
cbind(catch_q)
library(tidyverse)
library(tidybayes)
library(here)
library(rstan)
library(bayesplot)
library(rstanarm)
# load model ==============
bh_fit<- read_rds("output/stan_fit_DATA.RDS")
# bh_fit <- read_rds("output/stan_fit_DATA_forAFS.RDS")
# bh_fit <- read_rds("output/stan_fit_DATA_nocovar.RDS")
# year DF for joins ==================
years <-read_csv("data/processed_data/yukon_fall_spawners.csv") %>%
filter(cal_year >= year_min) %>%
dplyr::select(cal_year) %>%
dplyr::mutate(time = c(1:nrow(.)))
# traceplot ========
traceplot(bh_fit,pars=  c( "theta1[1]" ,"theta1[2]" ,"theta1[3]" ,"theta1[4]" ,
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"))
traceplot(bh_fit,pars=  c("D_scale"))
# traceplot(bh_fit,pars=  c( "log_c_1","log_c_2"))
traceplot(bh_fit,pars=  c( "log_catch_q" ))
traceplot(bh_fit,pars=  c(  "Dir_alpha"))
# traceplot(bh_fit,pars=  c("prob[1]", "prob[2]","prob[3]"))
# traceplot(bh_fit,pars=  c("p_1","p_2"))
traceplot(bh_fit,pars=  c("log_sigma_sp"))
library(tidyverse)
library(tidybayes)
library(here)
library(rstan)
library(bayesplot)
library(rstanarm)
# load model ==============
bh_fit<- read_rds("output/stan_fit_DATA.RDS")
# bh_fit <- read_rds("output/stan_fit_DATA_forAFS.RDS")
# bh_fit <- read_rds("output/stan_fit_DATA_nocovar.RDS")
# year DF for joins ==================
years <-read_csv("data/processed_data/yukon_fall_spawners.csv") %>%
filter(cal_year >= year_min) %>%
dplyr::select(cal_year) %>%
dplyr::mutate(time = c(1:nrow(.)))
# For a specific parameter (e.g., 'beta'):
params <- (rstan::extract(bh_fit, pars = c("log_c_2", "log_c_1")))
params
# For a specific parameter (e.g., 'beta'):
params <- get_posterior_mean(rstan::extract(bh_fit, pars = c("log_c_2", "log_c_1")))
# You can also use rstan's built-in functions:
t <- get_posterior_mean(bh_fit, pars = 'log_c_1')
View(t)
# View(t)
get_posterior_mean(bh_fit, pars = 'p_2')
get_posterior_mean(bh_fit, pars = 'basal_p_2')
mean(get_posterior_mean(bh_fit, pars = 'basal_p_2'))
mean(get_posterior_mean(bh_fit, pars = 'basal_p_1'))
