#facet_wrap(~rowname,scales = "free")
# Spawners by brood Year ============
age_comp = (data_list_stan$p_obs)
sp_obs_brood <- data.frame(obs = data_list_stan$data_stage_sp) %>%
dplyr::mutate("3" = obs*age_comp[1],
"4" = obs*age_comp[2],
"5" = obs*age_comp[3],
"6" = obs*age_comp[4]) %>%
dplyr::select(2:5) %>%
dplyr::mutate(time = 1:nrow(.)) %>%
gather(1:4, key = "age", value = "abundance") %>%
dplyr::mutate(age = as.numeric(age),
brood = time - age) %>%
group_by(brood) %>%
dplyr::summarise(obs = sum(abundance))
brood_pred <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
#filter(!time>23) %>%
mutate(brood =  time-age-1) %>%
group_by(brood) %>%
summarise(pred = sum(mean)) %>%
mutate(rowname = "spawner") %>%
left_join(sp_obs_brood) %>%
dplyr::select(-rowname) %>%
gather(2:3, key = "id", value = "value") %>%
filter(!brood<2)
ggplot(data = brood_pred) +
geom_line(aes(x=brood, y = value, group = id, color = id)) +
ggtitle(("Comapre spawners by brood year")) # +
#facet_wrap(~rowname,scales = "free")
# recruits by brood Year ============
age_comp = (data_list_stan$p_obs)
recruit_obs_brood <- data.frame(obs = data_list_stan$data_stage_return) %>%
dplyr::mutate("3" = obs*age_comp[1],
"4" = obs*age_comp[2],
"5" = obs*age_comp[3],
"6" = obs*age_comp[4]) %>%
dplyr::select(2:5) %>%
dplyr::mutate(time = 1:nrow(.)) %>%
gather(1:4, key = "age", value = "abundance") %>%
dplyr::mutate(age = as.numeric(age),
brood = time - age) %>%
group_by(brood) %>%
dplyr::summarise(obs = sum(abundance))
brood_pred <- summary(bh_fit, pars = c("N_recruit"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
#filter(!time>23) %>%
mutate(brood =  time-age-1) %>%
group_by(brood) %>%
summarise(pred = sum(mean)) %>%
mutate(rowname = "recruit") %>%
left_join(recruit_obs_brood) %>%
dplyr::select(-rowname) %>%
gather(2:3, key = "id", value = "value") %>%
filter(!brood<2)
ggplot(data = brood_pred) +
geom_line(aes(x=brood, y = value, group = id, color = id)) +
ggtitle(("Comapre recruits by brood year")) # +
#facet_wrap(~rowname,scales = "free")
# catch by brood Year ============
age_comp = (data_list_stan$p_obs)
harvest_obs_brood <- data.frame(obs = data_list_stan$data_stage_harvest) %>%
dplyr::mutate("3" = obs*age_comp[1],
"4" = obs*age_comp[2],
"5" = obs*age_comp[3],
"6" = obs*age_comp[4]) %>%
dplyr::select(2:5) %>%
dplyr::mutate(time = 1:nrow(.)) %>%
gather(1:4, key = "age", value = "abundance") %>%
dplyr::mutate(age = as.numeric(age),
brood = time - age) %>%
group_by(brood) %>%
dplyr::summarise(obs = sum(abundance))
brood_pred <- summary(bh_fit, pars = c("N_catch"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:28, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
#filter(!time>23) %>%
mutate(brood =  time-age-1) %>%
group_by(brood) %>%
summarise(pred = sum(mean)) %>%
mutate(rowname = "harvest") %>%
left_join(harvest_obs_brood) %>%
dplyr::select(-rowname) %>%
gather(2:3, key = "id", value = "value") %>%
filter(!brood<2)
ggplot(data = brood_pred) +
geom_line(aes(x=brood, y = value, group = id, color = id)) +
ggtitle(("Comapre harvest by brood year"))
# Add juveniles by brood Year ============
brood_year_j <- summ_n_j %>%
select(mean, obs, time) %>%
rename(brood = "time",
mean_juv = "mean",
obs_j = "obs") %>%
mutate(obs_j = obs_j*100 ) %>%
gather(1:2, key = "id", value = "value")
brood_pred2 <- brood_pred %>%
#mutate(brood = brood+1) %>%
rbind(brood_year_j)
ggplot(data = brood_pred2) +
geom_line(aes(x=brood, y = value, group = id, color = id)) +
ggtitle(("all stages compare")) # +
# align all stages on one plot to look at scale. =====
all_stages<- rbind(summ_n_sp %>% select(-obs),
summ_n_rec%>% select(-obs),
summ_n_harvest%>% select(-obs),
summ_n_j%>% select(time, rowname,mean,se_mean) %>%
mutate(mean = mean,
time = time-1
)#,
#pred_N_eggs_sum
) %>%
group_by(rowname) %>%
mutate(mean = as.numeric(scale(mean)))
ggplot(data = all_stages) +
geom_line(aes(x=time, y = mean, group = rowname, color = rowname)) +
# geom_ribbon(aes(x=time, ymin = mean-se_mean,
#                 ymax = mean+se_mean))+
#  facet_wrap(~rowname, scales = "free") +
ggtitle(("all stages compare - mean scaled")) +
ylab("mean scaled")
theta <- summary(bh_fit, pars = c("theta1[1]"),
probs = c(0.1, 0.9))$summary %>%
data.frame()
View(theta)
# plot age comp  ======
age_comp <- summary(bh_fit, pars = c("p"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
rename(pred = "mean") %>%
cbind(obs = data_list_stan$p_obs) %>%
dplyr::select(1,2,9) %>%
gather(2:3, key = "key", value = "value")
ggplot(data = age_comp) +
geom_point(aes(x= rowname, y = value, group = key, color = key)) +
theme_classic()
# plot theta ========
theta <- summary(bh_fit, pars = c("theta1[1]","theta2[1]"),
probs = c(0.1, 0.9))$summary %>%
data.frame()
# plot theta ========
theta <- summary(bh_fit, pars = c("theta1[1]","theta2[1]"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()
ggplot(data = theta,aes(x= rowname, y = mean, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(ymin =X10., ymax = X90. ))
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(ymin =X10., ymax = X90. ))
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90. )) +
facet_wrap(~rowname)
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90. )) +
facet_wrap(~rowname,scales = "free")
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90.),widht = 0.1) +
facet_wrap(~rowname,scales = "free") +
geom_hline(xintercept=0)
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90.),width = 0.1) +
facet_wrap(~rowname,scales = "free") +
geom_hline(xintercept=0)
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90.),width = 0.1) +
facet_wrap(~rowname,scales = "free") +
geom_vline(xintercept=0)
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90.),width = 0.1) +
facet_wrap(~rowname,scales = "free") #+
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90.),width = 0.1) +
facet_wrap(~rowname,scales = "free") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90.),width = 0.1) +
facet_wrap(~rowname,scales = "free") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "sigma_y_j"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "basal_p_1", "basal_p_2"),
fill_color = "blue")
# plot theta ========
theta <- summary(bh_fit, pars = c("theta1[1]","theta2[1]"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()
ggplot(data = theta,aes(x= mean, y = rowname, group = rowname, color = rowname)) +
geom_point() +
theme_classic() +
geom_errorbar(aes(xmin =X10., xmax = X90.),width = 0.1) +
facet_wrap(~rowname,scales = "free") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
geom_vline(xintercept=0)
library(rstan)
library(tidyverse)
library(here)
library(bayesplot)
library(rstanarm)
library(tidync)
library(lubridate)
library(readxl)
# log_f = runif(1,-4,-1)
# 1-exp(-exp(log_f))
# Things to look into  =======================================================
# sigma for both life stages in estimates so I can fix it instead of have model estimate it
# Load data ==================================================================
# see 01_make salmon data.R for salmon data tidying
# see 02_make covariates for data tidying
# setup inputs ===============================================================
warmups <- 2000
total_iterations <- 4000
max_treedepth <-  15
n_chains <- 4
n_cores <- 4
adapt_delta <- 0.95
year_min = 2002
year_max_cal = 2022
year_max_brood = 2022
# load salmon data ==============================================
## Fall age comp ================================================
yukon_fall_obs_agecomp <- read_csv("data/processed_data/yukon_fall_age_comp.csv") %>%
filter(cal_year >= year_min,
cal_year <= 2022
) %>%
dplyr::select(2:ncol(.)) %>%
as.matrix()
## Spawners, Recruits, Harvest ====================================
yukon_fall_spawners <-read_csv("data/processed_data/yukon_fall_spawners.csv") %>%
filter(cal_year >= year_min #,
#cal_year <= year_max_cal
) %>%
select(2) %>%
as.vector()
yukon_fall_harvest<-read_csv("data/processed_data/yukon_fall_harvest.csv") %>%
filter(cal_year >= year_min#,
#cal_year <= year_max_cal
)%>%
select(2) %>%
as.vector()
yukon_fall_recruits<-read_csv("data/processed_data/yukon_fall_recruits.csv") %>%
filter(cal_year >= year_min#,
#cal_year <= year_max_cal
) %>%
select(2) %>%
as.vector()
## Fall Juveniles ================================================
fall_juv <- read_csv("data/processed_data/tidy_juv_fall_yukon.csv")  %>%
filter(Year <= year_max_brood) %>%
select(2) %>%
as.vector()
#plot(fall_juv$fall_abundance, type ="l")
# CV ========================================
spawner_cv <- read_xlsx("data/chum_cv.xlsx") %>%
filter(year >= year_min,
year <= 2022)
# Summer ================================================
# summer_age_comp<-read_csv("data/age_comps/processed_age_comps_summer_yukon.csv")  %>%
#   filter(!cal_year < 2005 )
# summer_brood <- read_csv("output/yukon_summer_broodyear.csv")%>%
#   filter(!brood_year < 2002) # for now to simplify matching with juveniles
# yukon_summer <- read_excel("data/Yukon_Escapement_ADFG/S Chum RR 2023.xlsx", sheet = 2) %>%
#   dplyr::select(1,11:14) %>%
#   janitor::row_to_names(row_number = 1) %>%
#   dplyr::rename(cal_year = "Year")  %>%
#   dplyr::mutate(age3=as.numeric(age3),
#                 age4=as.numeric(age4),
#                 age5=as.numeric(age5),
#                 age6=as.numeric(age6)) %>%
#   filter(!cal_year < 2005)
# ## harvest below weir
# harvest_escapement <- read_excel("data/Yukon_Escapement_ADFG/S Chum RR 2023.xlsx", sheet = 2) %>%
#   dplyr::select(1:2,4) %>%
#   janitor::row_to_names(row_number = 1)  %>%
#   dplyr::rename(cal_year = "Year") %>%
#   dplyr::mutate(cal_year = as.numeric(cal_year),
#          Harvest = as.numeric(Harvest),
#          Escapement = as.numeric(Escapement)) %>%
#   filter(!cal_year < 2005) %>% # from brood year 2002 (first year of juvenile data), the first year that fish could return is 2005 if its a 3yo, the last yera it coudl return is 2007 if its a 6yo.
#   as.data.frame()  #%>%
#  #as.matrix()
#  covariates =================
stage_a_cov <- read_csv("data/processed_covariates/stage_a_all.csv") %>%
filter(Year >= year_min,
Year <= year_max_brood) %>%
dplyr::mutate(yukon_mean_discharge = as.numeric(scale(yukon_mean_discharge)),
SST_CDD_NBS = as.numeric(scale(SST_CDD_NBS))) %>%
dplyr::select(SST_CDD_NBS #yukon_mean_discharge,Cnideria,
#Large_zoop
) %>% #,yukon_mean_discharge) %>% #, Cnideria, Large_zoop) %>%
as.matrix()
stage_b_cov <- read_csv("data/processed_covariates/stage_b_all.csv") %>%
filter(Year >= year_min,
Year <= year_max_brood
) %>%
dplyr::mutate(SST_CDD_SEBS = as.numeric(scale(SST_CDD_SEBS)),
Chum_hatchery= as.numeric(scale(Chum_hatchery)),
Pink_hatchery= as.numeric(scale(Pink_hatchery))#,
#yukon_mean_discharge_summer= as.numeric(scale(yukon_mean_discharge_summer))
) %>%
dplyr::select(SST_CDD_SEBS#,
# Chum_hatchery,
# Pink_hatchery
) %>%
as.matrix()
# number covariates for each life stage
ncovars1 = 1
ncovars2 = 1
# Organize data call inputs ================================================
nByrs = nrow(fall_juv) # Number of BROOD years
nRyrs = nrow(yukon_fall_harvest) # Number of CAL/RETURN
nRyrs_T = nByrs + 4 + 2
A = 4 # number of age classes, 3,4,5,6
K = 1 # number of stocks
Ps = 0.5 # proportion of females - assumption, need to lit check
fs = as.vector(c(1800, 2000, 2200, 2440)) # fecundity - Gilk-Baumer 2009 estimate for Kusko Chum is: 2440. I added extra numbers temporarily just so that younger fish reproduce less, but will have to look up data for this more...
t_start = A + 2 # to fill starting values
# mean productivity rate =====
# estimating this now
basal_p_1 = 0.03  # these are values it estimates at when allowed to
basal_p_2 = 0.3
# fix marine mortality =======
# generally low mortality in ocean for older life stages
M_fill_stan = c(0.06, 0.06, 0.06,0.06) # will be cumulative
#ess age comp =======
ess_age_comp = as.vector(rep(50, times = nByrs))
# STAN STARTING VALUES ==========
kappa_j_start =  basal_p_1
kappa_marine_start = basal_p_2
# N_j_start =  as.vector(NA)
# N_e_sum_start = as.vector(NA)
#
# N_recruit_start = matrix(NA,nrow=t_start, ncol=A)
# N_catch_start = matrix(NA,nrow=t_start, ncol=A)
#  N_egg_start = matrix(NA,nrow=t_start, ncol=A)
# N_ocean_start = matrix(NA,nrow=t_start, ncol=A)#vector() # ages # array(data = NA, dim = c(1, A))
# N_sp_start = matrix(NA,nrow=t_start, ncol=A)#vector() # array(data = NA, dim = c(1, A,K))
#
# N_j_start = exp(rnorm(1,15,2))
# N_e_sum_start = exp(rnorm(1,20,2)) #exp(rnorm(1,30,2))
# use average age comp to distribute starting values
p <- colMeans(yukon_fall_obs_agecomp[1:21,])
#
# for(t in 1:t_start){
#   N_recruit_start[t,] = exp(rnorm(1,12.9,2))*p
#   N_ocean_start[t,] = exp(rnorm(1,13,2))*p
#   N_sp_start[t,] = exp(rnorm(1,12.2,2))*p #exp(rnorm(1,log(398700),2))*p
#   N_catch_start[t,] = exp(rnorm(1,10.6,2))*p #exp(rnorm(1,log(27769),2))*p
#   N_egg_start[t,] = exp(rnorm(1,20,2))*p
# }
# ASSIGN DATA ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
Ps=Ps,
fs=fs,
M = M_fill_stan,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2, estimating these now
data_sp_cv = spawner_cv$fall_spawner_cv,
data_recruit_cv = spawner_cv$summer_recruit_cv,
#  data_j_cv = fall_juv_cv$CV,
data_stage_j = as.vector(fall_juv$fall_abundance),
data_stage_return = as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
# N_ocean_start = N_ocean_start,
# N_egg_start = N_egg_start,
# N_j_start =  N_j_start,
# N_e_sum_start = N_e_sum_start,
kappa_marine_mort_start = c(-log(basal_p_2), -log(basal_p_2)),
kappa_marine_start = c(basal_p_2, basal_p_2),
kappa_j_start = basal_p_1,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=yukon_fall_obs_agecomp,
ess_age_comp=ess_age_comp,
p_obs = p,
basal_p_1 = 0.01,
basal_p_2 = 0.3)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,#n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
library(bayesplot)
mcmc_intervals(bh_fit, pars = c("theta1[1]","theta2[1]"))
mcmc_areas(
bh_fit,
pars = c("theta1[1]","theta2[1]"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
)
# plot age comp  ======
age_comp <- summary(bh_fit, pars = c("p"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
rename(pred = "mean") %>%
cbind(obs = data_list_stan$p_obs) %>%
dplyr::select(1,2,9) %>%
gather(2:3, key = "key", value = "value")
ggplot(data = age_comp) +
geom_point(aes(x= rowname, y = value, group = key, color = key)) +
theme_classic()
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "theta1[1]",#"theta1[2]","theta1[3]","theta1[4]",
"theta2[1]"#,"theta2[2]","theta2[3]"
),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "p_1" ),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "p_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "kappa_marine_survival"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "kappa_j_survival"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_F_mean"),
fill_color = "blue")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 4,#n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "theta1[1]",#"theta1[2]","theta1[3]","theta1[4]",
"theta2[1]"#,"theta2[2]","theta2[3]"
),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "p_1" ),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "p_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "kappa_marine_survival"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "kappa_j_survival"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_F_mean"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_F_dev_y"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "prob[1]", "prob[2]","prob[3]", "basal_p_1"),#, "basal_p_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c(  "log_c_1", "log_c_2" ),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c("log_catch_q"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "g"),
fill_color = "blue")
