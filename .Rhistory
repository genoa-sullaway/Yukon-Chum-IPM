ymax = mean_J_Q+se_mean), alpha = 0.5)+
ggtitle(("Juveniles, est and observed"))
# plot age comp through time =================
age_comp_dat <- data.frame(yukon_fall_obs_agecomp) %>%
dplyr::mutate(time = 1:21) %>%
left_join(years) %>%
gather(1:4, key = "age", value = "obs") %>%
dplyr::mutate(age = case_when(age == "abund_0.3" ~ 3,
age == "abund_0.4" ~ 4,
age == "abund_0.5" ~ 5,
age == "abund_0.6" ~ 6))
age_comp_Q <- summary(bh_fit, pars = c("q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:21, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
left_join(years) %>%
left_join( age_comp_dat) %>%
rename(pred = "mean") %>%
dplyr::select(time,age,pred,obs) %>%
gather(3:4, key = "id", value = "value")
traceplot(bh_fit,pars=  c("sigma_sp"))
traceplot(bh_fit,pars=  c("sigma_juv"))
traceplot(bh_fit,pars=  c("sigma_catch"))
# assign data ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
nByrs_return_dat=nByrs_return_dat,
Ps=Ps,
fs=fs,
M = M_fill_stan,
lik_count = 3, # for sensitivity testing
data_stage_j = as.vector(fall_juv$fall_abund),
data_stage_return = as.vector(yukon_fall_return_brood_year$Brood_Year_Return),
#data_stage_return=as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
years_data_sp = yukon_fall_spawners$cal_year,
years_data_juv = fall_juv$brood_year,
years_data_return = yukon_fall_return_brood_year$Brood_Year,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
data_sp_cv = spawner_cv$fall_spawner_cv,
o_run_comp=(yukon_fall_obs_agecomp),
ess_age_comp=ess_age_comp,
basal_p_1 = 0.9,
basal_p_2 = 0.9,
log_c_1 = 15,
log_c_2 =22,
pi = pi)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1, #n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# Plot Observed vs Predicted ========
## Spawners ==========
pred_N_SP <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:26, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
# filter(!time>20) %>% # remove years without full return estimates
left_join(years)
# sum to compare with data
summ_n_sp <- pred_N_SP %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
sd = mean(sd)) %>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_sp),
obs = c(data_list_stan$data_stage_sp))) %>%
dplyr::mutate(rowname = "sp")
ggplot(data = summ_n_sp) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
ggtitle("Spawners: obs and predicted")+
scale_x_continuous(breaks = c(2002, 2006,2010, 2015,2020)) +
theme_classic()
## brood year return ======
pred_N_brood_year_return <- summary(bh_fit, pars = c("N_brood_year_return"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = (1:20)) %>%
left_join(years)%>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_return),
obs = data_list_stan$data_stage_return)) %>%
mutate(rowname = "recruit")
ggplot(data = pred_N_brood_year_return) +
geom_line(aes(x=cal_year, y = mean)) +
geom_point(aes(x=cal_year, y = obs)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean))+
ggtitle(("brood year return"))
## harvest =========
pred_N_harvest <- summary(bh_fit, pars = c("N_catch"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:26, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
left_join(years) %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
dplyr::left_join( data.frame(cal_year = c(data_list_stan$years_data_sp),
obs = c(data_list_stan$data_stage_harvest)), by ="cal_year") %>%
dplyr::mutate(rowname = "harvest")
ggplot(data = pred_N_harvest) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean))+
ggtitle(("Harvest, est and observed"))
## juveniles ======
# multiply by catch q to fit observations
catch_q <- summary(bh_fit, pars = c("log_catch_q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
mutate(mean = exp(mean))
pred_N_j <- summary(bh_fit, pars = c("N_j"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = 1:nrow(.)) %>%
# filter(!time==22) %>%
left_join(years)
# plot proportions
# sum to compare with data
summ_n_j <- pred_N_j %>%
dplyr::mutate(mean_J_Q = mean*catch_q$mean,
se_mean = se_mean*catch_q$mean) %>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_juv ),
obs = c(data_list_stan$data_stage_j))) %>%
mutate(rowname = "juv")
ggplot(data = summ_n_j) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean_J_Q)) +
# geom_line(aes(x=time, y = mean), color = "green") +
geom_ribbon(aes(x=cal_year, ymin = mean_J_Q-se_mean,
ymax = mean_J_Q+se_mean), alpha = 0.5)+
ggtitle(("Juveniles, est and observed"))
# traceplot ========
traceplot(bh_fit,pars=  c( "theta1[1]" ,"theta1[2]" ,"theta1[3]" ,"theta1[4]" ,
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"))
traceplot(bh_fit,pars=  c("D_scale"))
traceplot(bh_fit,pars=  c( "log_c_1","log_c_2"))
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"
),
fill_color = "blue")
debugSource("~/Documents/GitHub/AYK_prey/scripts/03_call_stan_mod_BH_dat.R", echo=TRUE)
# assign data ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
nByrs_return_dat=nByrs_return_dat,
Ps=Ps,
fs=fs,
M = M_fill_stan,
lik_count = 3, # for sensitivity testing
data_stage_j = as.vector(fall_juv$fall_abund),
data_stage_return = as.vector(yukon_fall_return_brood_year$Brood_Year_Return),
#data_stage_return=as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
years_data_sp = yukon_fall_spawners$cal_year,
years_data_juv = fall_juv$brood_year,
years_data_return = yukon_fall_return_brood_year$Brood_Year,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
data_sp_cv = spawner_cv$fall_spawner_cv,
o_run_comp=(yukon_fall_obs_agecomp),
ess_age_comp=ess_age_comp,
# basal_p_1 = 0.9,
# basal_p_2 = 0.9,
log_c_1 = 15,
log_c_2 =22,
pi = pi)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1, #n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]",
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"
),
fill_color = "blue")
## brood year return ======
pred_N_brood_year_return <- summary(bh_fit, pars = c("N_brood_year_return"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = (1:20)) %>%
left_join(years)%>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_return),
obs = data_list_stan$data_stage_return)) %>%
mutate(rowname = "recruit")
ggplot(data = pred_N_brood_year_return) +
geom_line(aes(x=cal_year, y = mean)) +
geom_point(aes(x=cal_year, y = obs)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean))+
ggtitle(("brood year return"))
## harvest =========
pred_N_harvest <- summary(bh_fit, pars = c("N_catch"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:26, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
left_join(years) %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
dplyr::left_join( data.frame(cal_year = c(data_list_stan$years_data_sp),
obs = c(data_list_stan$data_stage_harvest)), by ="cal_year") %>%
dplyr::mutate(rowname = "harvest")
ggplot(data = pred_N_harvest) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean))+
ggtitle(("Harvest, est and observed"))
## juveniles ======
# multiply by catch q to fit observations
catch_q <- summary(bh_fit, pars = c("log_catch_q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
mutate(mean = exp(mean))
pred_N_j <- summary(bh_fit, pars = c("N_j"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = 1:nrow(.)) %>%
# filter(!time==22) %>%
left_join(years)
# plot proportions
# sum to compare with data
summ_n_j <- pred_N_j %>%
dplyr::mutate(mean_J_Q = mean*catch_q$mean,
se_mean = se_mean*catch_q$mean) %>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_juv ),
obs = c(data_list_stan$data_stage_j))) %>%
mutate(rowname = "juv")
ggplot(data = summ_n_j) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean_J_Q)) +
# geom_line(aes(x=time, y = mean), color = "green") +
geom_ribbon(aes(x=cal_year, ymin = mean_J_Q-se_mean,
ymax = mean_J_Q+se_mean), alpha = 0.5)+
ggtitle(("Juveniles, est and observed"))
traceplot(bh_fit,pars=  c( "log_c_1","log_c_2"))
traceplot(bh_fit,pars=  c("basal_p_1", "basal_p_2"))
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "basal_p_2"),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "basal_p_1"),
fill_color = "blue")
# plot  estimated kappas survival ======
kappasurvival <- summary(bh_fit, pars = c("kappa_marine_survival", "kappa_j_survival"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:21, length.out = nrow(.)),
variable = case_when(grepl("kappa_marine_survival",rowname) ~ "kappa_marine_survival",
grepl("kappa_j_survival",rowname) ~ "kappa_j_survival")) %>%
left_join(years)# %>%
ggplot(data = kappasurvival,
aes(x=cal_year, y = mean, group = variable ,color = variable)) +
geom_line( ) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean), alpha = 0.5) +
scale_x_continuous(breaks = c(2002,2006,2010, 2015,2020, 2022))
ggplot(data = kappasurvival,
aes(x=cal_year, y = mean, group = variable ,color = variable)) +
geom_line( ) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean), alpha = 0.5) +
facet_wrap(~variable, scales = "free") +
scale_x_continuous(breaks = c(2002,2006,2010, 2015,2020, 2022)) +
theme_classic() +
xlab("Brood Year") +
ylab("Survival Rate")
# traceplot ========
traceplot(bh_fit,pars=  c( "theta1[1]" ,"theta1[2]" ,"theta1[3]" ,"theta1[4]" ,
"theta2[1]","theta2[2]","theta2[3]","theta2[4]"))
fit_all <- read_rds("output/stan_fit_DATA.RDS")
t <- powerscale_sensitivity(fit_all)
a <- powerscale_plot_dens(fit_all, variable = "theta1")
a
View(t)
t[1,]
t[333,]
t_a<-t[333,]
View(t_a)
powerscale_plot_ecdf(fit_all, variable = "theta1")
powerscale_plot_quantities(fit_all, variable = "theta1")
powerscale_plot_dens(fit_all, variable = "theta2")
powerscale_plot_ecdf(fit_all, variable = "theta2")
powerscale_plot_quantities(fit_all, variable = "theta2")
powerscale_plot_ecdf(fit_all, variable = "basal_p_1")
powerscale_plot_ecdf(fit_all, variable = "basal_p_2")
powerscale_plot_ecdf(fit_all, variable = "F")
powerscale_plot_ecdf(fit_all, variable = "log_S")
# make table for supplement that has complete model output:
# parameters, parameter descriotion, Rhat, Neff, symbol,mean estiamte with CIs
# Load required libraries
library(tidyverse)
library(knitr)
library(kableExtra)
library(rstan)
library(gtsummary)
fit<- read_rds("output/stan_fit_DATA.RDS")
# Function to create summary statistics from posterior samples
create_parameter_summary <- function(fit, parameter_name, notation, prior) {
# Extract posterior summary
posterior_summary <- summary(fit)$summary
# Get statistics for the parameter
param_stats <- posterior_summary[parameter_name, ]
data.frame(
Parameter = parameter_name,
Notation = notation,
Estimate = sprintf("%.2f", param_stats["mean"]),
CI_95 = sprintf("[%.2f, %.2f]",
param_stats["2.5%"],
param_stats["97.5%"]),
ESS = sprintf("%.0f", param_stats["n_eff"]),  # Effective Sample Size
Rhat = sprintf("%.3f", param_stats["Rhat"]),  # R-hat convergence diagnostic
Prior = prior,
stringsAsFactors = FALSE
)
}
# Create summary for multiple parameters ==============
# each param will need to be manual
summary_df <- rbind(
### Carrying capacity 1   =======
create_parameter_summary(
fit = fit,
parameter_name = "log_c_1",
notation = "$\\omega$",
prior = "Normal(0.5, 0.25)"
),
### Carrying capacity 2   =======
create_parameter_summary(
fit = fit,
parameter_name = "log_c_2",
notation = "$K$",
prior = "LogNormal(5, 1)"
),
### sigma sp  =======
create_parameter_summary(
fit = fit,
parameter_name = "log_sigma_sp",
notation = "$N_0$",
prior = "LogNormal(3, 0.5)"
),
### sigma catch =======
create_parameter_summary(
fit = fit,
parameter_name = "log_sigma_catch",
notation = "$\\sigma_p$",
prior = "Half-Cauchy(0, 2.5)"
),
### theta 1 =======
create_parameter_summary(
fit = fit,
parameter_name = "theta1[1]",
notation = "$\\sigma_o$",
prior = "Half-Cauchy(0, 2.5)"
),
### theta 2 =======
create_parameter_summary(
fit = fit,
parameter_name = "theta2[1]",
notation = "$\\sigma_o$",
prior = "Half-Cauchy(0, 2.5)"
),
### D_scale =======
create_parameter_summary(
fit = fit,
parameter_name = "D_scale",
notation = "$\\sigma_o$",
prior = "Half-Cauchy(0, 2.5)"
),
# F
create_parameter_summary(
fit = fit,
parameter_name = "log_F_mean",
notation = "$K$",
prior = "LogNormal(5, 1)"
),
# F SD
create_parameter_summary(
fit = fit,
parameter_name = "log_F_dev_y[1]",
notation = "$K$",
prior = "LogNormal(5, 1)"
),
# selectivity
create_parameter_summary(
fit = fit,
parameter_name = "log_S[1]",
notation = "$K$",
prior = "LogNormal(5, 1)"
))
# Add parameter grouping
summary_df$Group <- c("Carrying capacity","Carrying capacity",
"Observation Error", "Observation Error",
"Covariate Coefficient", "Covariate Coefficient",
"Age Structure Variability", "Mean Instantaneous Fishing Mortality",
"Fishing Mortality Deviations",
"Selectivity")
# Create formatted table with parameter grouping
table <- summary_df %>%
# Reorder columns to include grouping
select(Group, Parameter, Notation, Estimate, CI_95, ESS, Rhat, Prior) %>%
# Create the table
kable(format = "latex",
escape = FALSE,
col.names = c("Group", "Parameter", "Notation", "Estimate",
"95% CI", "ESS", "R-hat", "Prior"),
align = c("l", "l", "c", "c", "c", "r", "c", "l"),
booktabs = TRUE) %>%
kable_styling(latex_options = c("striped", "hold_position")) %>%
# Add grouping
pack_rows(index = table(summary_df$Group)) %>%
# Add footnote explaining diagnostics
footnote(
c("ESS: Effective Sample Size",
"R-hat: Gelman-Rubin convergence diagnostic")#,
# threepartslong = TRUE
)
# Print table
print(table)
summary_df
View(summary_df)
# assign data ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
nByrs_return_dat=nByrs_return_dat,
Ps=Ps,
fs=fs,
M = M_fill_stan,
lik_count = 3, # for sensitivity testing
data_stage_j = as.vector(fall_juv$fall_abund),
data_stage_return = as.vector(yukon_fall_return_brood_year$Brood_Year_Return),
#data_stage_return=as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
years_data_sp = yukon_fall_spawners$cal_year,
years_data_juv = fall_juv$brood_year,
years_data_return = yukon_fall_return_brood_year$Brood_Year,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
data_sp_cv = spawner_cv$fall_spawner_cv,
o_run_comp=(yukon_fall_obs_agecomp),
ess_age_comp=ess_age_comp,
# basal_p_1 = 0.9,
# basal_p_2 = 0.9,
log_c_1 = 15,
log_c_2 =22,
pi = pi)
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1, #n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
