data_list <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
K=K,
Ps=Ps,
fs=fs,
data_stage_j = data_stage_j, # after translated from "simulation" to "basis index observed" using Q multiplier.
data_stage_return = data_stage_return,
data_stage_sp = data_stage_sp,
H_b=H_b,
o_run_comp=o_run_comp_mat,
ess_age_comp=ess_age_comp,
log_N_j_start = log_N_j_start,
log_N_recruit_start = log_N_recruit_start,
log_N_e_sum_start=log_N_e_sum_start,
log_N_egg_start=log_N_egg_start,
log_N_sp_start=log_N_sp_start,
log_N_returning_start=log_N_returning_start,
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
kappa_marine_start = matrix(basal_p_2, nrow = 1, ncol = 1), #kappa_marine_start,
kappa_j_start = matrix(basal_p_1,nrow = 1, ncol = 1)
# cov1 = cov1,
# cov2 = cov2,
# ncovars1 = 1,
# ncovars2 = 1,
# p_1=p_1,
# p_2=p_2,
# log_p_1=log_p_1,
# log_p_2=log_p_2,
# sigma_coef1 = sigma_coef1,
# sigma_coef2=sigma_coef2,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2,
# prob=prob,
# c_1=c_1,
# c_2=c_2,
# log_c_1 = log_c_1,
# log_c_2=log_c_2,
# D_scale = D_scale,
#
# g = g,
# p=p,
# Dir_alpha=Dir_alpha
)
#     "D_scale"= rbeta(1,1,1))
#     # "theta1" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, 0.1, 5)),
#     # "theta2" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, -0.2,10)),
#     # "g"= matrix(data=rep( c(rnorm(1,40,1), rnorm(1,80,1)) , nRyrs),
#     #              nrow=nByrs, ncol=A, byrow=TRUE)
# }
#
# # Initial List of Lists for Multiple Chains
# init_ll <- lapply(1:n_chains, function(id) init_fn(chain_id = id))
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
#     "D_scale"= rbeta(1,1,1))
#     # "theta1" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, 0.1, 5)),
#     # "theta2" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, -0.2,10)),
#     # "g"= matrix(data=rep( c(rnorm(1,40,1), rnorm(1,80,1)) , nRyrs),
#     #              nrow=nByrs, ncol=A, byrow=TRUE)
# }
#
# # Initial List of Lists for Multiple Chains
# init_ll <- lapply(1:n_chains, function(id) init_fn(chain_id = id))
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT_statespace.RDS")
spawners_age_class
View(spawners_age_class)
View(data_stage_sp)
View(data_stage_return)
View(H_b)
o_run_comp
o_run_comp_mat
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
# translate simulated data_list to actual observations
bh_fit<- read_rds("output/stan_fit_DATA_OUTPUT.RDS")
bh_summary <- summary(bh_fit)$summary %>%
as.data.frame(bh_fit) %>%
mutate(variable_mod = (names(bh_fit))) %>%
select(variable_mod, everything()) %>%
as_data_frame()
# parameters  ======================
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params<-bh_summary %>%
slice(1:8)
# plot ===========
obs_dat %>%
ggplot() +
geom_linerange(aes(variable, ymin = `2.5%`,ymax = `97.5%`)) +
geom_crossbar(aes(variable, mean, ymin = `25%`, ymax = `75%`), fill= 'grey') +
facet_wrap(~variable, scales = 'free') +
geom_point(aes(variable, mean_obs), color = "red" ) #observed
obs_dat %>%
ggplot() +
geom_linerange(aes(variable, ymin = `2.5%`,ymax = `97.5%`)) +
geom_crossbar(aes(variable, mean, ymin = `25%`, ymax = `75%`), fill= 'grey') +
facet_wrap(~variable, scales = 'free')
View(params)
params %>%
ggplot() +
geom_linerange(aes(mean, ymin = `2.5%`,ymax = `97.5%`)) +
geom_crossbar(aes(mean, mean, ymin = `25%`, ymax = `75%`), fill= 'grey') +
facet_wrap(~variable_mod, scales = 'free')
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
library(tidyverse)
library(tidybayes)
library(here)
# translate simulated data_list to actual observations
bh_fit<- read_rds("output/stan_fit_DATA_OUTPUT.RDS")
bh_summary <- summary(bh_fit)$summary %>%
as.data.frame(bh_fit) %>%
mutate(variable_mod = (names(bh_fit))) %>%
select(variable_mod, everything()) %>%
as_data_frame()
# parameters  ======================
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params<-bh_summary %>%
slice(1:8)
params %>%
ggplot() +
geom_linerange(aes(mean, ymin = `2.5%`,ymax = `97.5%`)) +
geom_crossbar(aes(mean, mean, ymin = `25%`, ymax = `75%`), fill= 'grey') +
facet_wrap(~variable_mod, scales = 'free')
exp(-12)
exp(-1.609438)
basal_p_1
## assign data list ==========
data_list <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
K=K,
Ps=Ps,
fs=fs,
data_stage_j = data_stage_j, # after translated from "simulation" to "basis index observed" using Q multiplier.
data_stage_return = data_stage_return,
data_stage_sp = data_stage_sp,
H_b=H_b,
o_run_comp=o_run_comp_mat,
ess_age_comp=ess_age_comp,
log_N_j_start = log_N_j_start,
log_N_recruit_start = log_N_recruit_start,
log_N_e_sum_start=log_N_e_sum_start,
log_N_egg_start=log_N_egg_start,
log_N_sp_start=log_N_sp_start,
log_N_returning_start=log_N_returning_start,
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
kappa_marine_start = matrix(basal_p_2, nrow = 1, ncol = 1), #kappa_marine_start,
kappa_j_start = matrix(basal_p_1,nrow = 1, ncol = 1)
# cov1 = cov1,
# cov2 = cov2,
# ncovars1 = 1,
# ncovars2 = 1,
# p_1=p_1,
# p_2=p_2,
# log_p_1=log_p_1,
# log_p_2=log_p_2,
# sigma_coef1 = sigma_coef1,
# sigma_coef2=sigma_coef2,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2,
# prob=prob,
# c_1=c_1,
# c_2=c_2,
# log_c_1 = log_c_1,
# log_c_2=log_c_2,
# D_scale = D_scale,
#
# g = g,
# p=p,
# Dir_alpha=Dir_alpha
)
#     "D_scale"= rbeta(1,1,1))
#     # "theta1" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, 0.1, 5)),
#     # "theta2" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, -0.2,10)),
#     # "g"= matrix(data=rep( c(rnorm(1,40,1), rnorm(1,80,1)) , nRyrs),
#     #              nrow=nByrs, ncol=A, byrow=TRUE)
# }
#
# # Initial List of Lists for Multiple Chains
# init_ll <- lapply(1:n_chains, function(id) init_fn(chain_id = id))
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
bh_fit<- read_rds("output/stan_fit_DATA_OUTPUT.RDS")
bh_summary <- summary(bh_fit)$summary %>%
as.data.frame(bh_fit) %>%
mutate(variable_mod = (names(bh_fit))) %>%
select(variable_mod, everything()) %>%
as_data_frame()
# parameters  ======================
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params<-bh_summary %>%
slice(1:8)
params %>%
ggplot() +
geom_linerange(aes(mean, ymin = `2.5%`,ymax = `97.5%`)) +
geom_crossbar(aes(mean, mean, ymin = `25%`, ymax = `75%`), fill= 'grey') +
facet_wrap(~variable_mod, scales = 'free')
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
## assign data list ==========
data_list <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
K=K,
Ps=Ps,
fs=fs,
data_stage_j = data_stage_j, # after translated from "simulation" to "basis index observed" using Q multiplier.
data_stage_return = data_stage_return,
data_stage_sp = data_stage_sp,
H_b=H_b,
o_run_comp=o_run_comp_mat,
ess_age_comp=ess_age_comp,
log_N_j_start = log_N_j_start,
log_N_recruit_start = log_N_recruit_start,
log_N_e_sum_start=log_N_e_sum_start,
log_N_egg_start=log_N_egg_start,
log_N_sp_start=log_N_sp_start,
log_N_returning_start=log_N_returning_start,
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
kappa_marine_start = matrix(basal_p_2, nrow = 1, ncol = 1), #kappa_marine_start,
kappa_j_start = matrix(basal_p_1,nrow = 1, ncol = 1),
# cov1 = cov1,
# cov2 = cov2,
# ncovars1 = 1,
# ncovars2 = 1,
# p_1=p_1,
# p_2=p_2,
# log_p_1=log_p_1,
# log_p_2=log_p_2,
# sigma_coef1 = sigma_coef1,
# sigma_coef2=sigma_coef2,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2,
# prob=prob,
# c_1=c_1,
# c_2=c_2,
log_c_1 = log_c_1,
log_c_2=log_c_2,
# D_scale = D_scale,
#
# g = g,
# p=p,
# Dir_alpha=Dir_alpha
)
log_c_1 = 18.4
log_c_2 = 15
## assign data list ==========
data_list <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
K=K,
Ps=Ps,
fs=fs,
data_stage_j = data_stage_j, # after translated from "simulation" to "basis index observed" using Q multiplier.
data_stage_return = data_stage_return,
data_stage_sp = data_stage_sp,
H_b=H_b,
o_run_comp=o_run_comp_mat,
ess_age_comp=ess_age_comp,
log_N_j_start = log_N_j_start,
log_N_recruit_start = log_N_recruit_start,
log_N_e_sum_start=log_N_e_sum_start,
log_N_egg_start=log_N_egg_start,
log_N_sp_start=log_N_sp_start,
log_N_returning_start=log_N_returning_start,
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
kappa_marine_start = matrix(basal_p_2, nrow = 1, ncol = 1), #kappa_marine_start,
kappa_j_start = matrix(basal_p_1,nrow = 1, ncol = 1),
# cov1 = cov1,
# cov2 = cov2,
# ncovars1 = 1,
# ncovars2 = 1,
# p_1=p_1,
# p_2=p_2,
# log_p_1=log_p_1,
# log_p_2=log_p_2,
# sigma_coef1 = sigma_coef1,
# sigma_coef2=sigma_coef2,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2,
# prob=prob,
# c_1=c_1,
# c_2=c_2,
log_c_1 = log_c_1,
log_c_2=log_c_2,
# D_scale = D_scale,
#
# g = g,
# p=p,
# Dir_alpha=Dir_alpha
)
## assign data list ==========
data_list <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
K=K,
Ps=Ps,
fs=fs,
data_stage_j = data_stage_j, # after translated from "simulation" to "basis index observed" using Q multiplier.
data_stage_return = data_stage_return,
data_stage_sp = data_stage_sp,
H_b=H_b,
o_run_comp=o_run_comp_mat,
ess_age_comp=ess_age_comp,
log_N_j_start = log_N_j_start,
log_N_recruit_start = log_N_recruit_start,
log_N_e_sum_start=log_N_e_sum_start,
log_N_egg_start=log_N_egg_start,
log_N_sp_start=log_N_sp_start,
log_N_returning_start=log_N_returning_start,
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
kappa_marine_start = matrix(basal_p_2, nrow = 1, ncol = 1), #kappa_marine_start,
kappa_j_start = matrix(basal_p_1,nrow = 1, ncol = 1),
# cov1 = cov1,
# cov2 = cov2,
# ncovars1 = 1,
# ncovars2 = 1,
# p_1=p_1,
# p_2=p_2,
# log_p_1=log_p_1,
# log_p_2=log_p_2,
# sigma_coef1 = sigma_coef1,
# sigma_coef2=sigma_coef2,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2,
# prob=prob,
# c_1=c_1,
# c_2=c_2,
log_c_1 = log_c_1,
log_c_2=log_c_2
# D_scale = D_scale,
#
# g = g,
# p=p,
# Dir_alpha=Dir_alpha
)
#     "D_scale"= rbeta(1,1,1))
#     # "theta1" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, 0.1, 5)),
#     # "theta2" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, -0.2,10)),
#     # "g"= matrix(data=rep( c(rnorm(1,40,1), rnorm(1,80,1)) , nRyrs),
#     #              nrow=nByrs, ncol=A, byrow=TRUE)
# }
#
# # Initial List of Lists for Multiple Chains
# init_ll <- lapply(1:n_chains, function(id) init_fn(chain_id = id))
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
log_c_1 = as.matrix(18.4, nrow = 1, ncol=1)
log_c_2 = as.matrix(15, nrow = 1, ncol=1)
## assign data list ==========
data_list <- list(nByrs=nByrs,
nRyrs=nRyrs,
A=A,
K=K,
Ps=Ps,
fs=fs,
data_stage_j = data_stage_j, # after translated from "simulation" to "basis index observed" using Q multiplier.
data_stage_return = data_stage_return,
data_stage_sp = data_stage_sp,
H_b=H_b,
o_run_comp=o_run_comp_mat,
ess_age_comp=ess_age_comp,
log_N_j_start = log_N_j_start,
log_N_recruit_start = log_N_recruit_start,
log_N_e_sum_start=log_N_e_sum_start,
log_N_egg_start=log_N_egg_start,
log_N_sp_start=log_N_sp_start,
log_N_returning_start=log_N_returning_start,
sigma_y_j=process_error_j,
sigma_y_r=process_error_r,
sigma_y_sp=process_error_sp,
kappa_marine_start = matrix(basal_p_2, nrow = 1, ncol = 1), #kappa_marine_start,
kappa_j_start = matrix(basal_p_1,nrow = 1, ncol = 1),
# cov1 = cov1,
# cov2 = cov2,
# ncovars1 = 1,
# ncovars2 = 1,
# p_1=p_1,
# p_2=p_2,
# log_p_1=log_p_1,
# log_p_2=log_p_2,
# sigma_coef1 = sigma_coef1,
# sigma_coef2=sigma_coef2,
# basal_p_1=basal_p_1,
# basal_p_2=basal_p_2,
# prob=prob,
# c_1=c_1,
# c_2=c_2,
log_c_1 = log_c_1,
log_c_2=log_c_2
# D_scale = D_scale,
#
# g = g,
# p=p,
# Dir_alpha=Dir_alpha
)
#     "D_scale"= rbeta(1,1,1))
#     # "theta1" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, 0.1, 5)),
#     # "theta2" = as.matrix(nrow = 1, ncol =1,rnorm(n=K, -0.2,10)),
#     # "g"= matrix(data=rep( c(rnorm(1,40,1), rnorm(1,80,1)) , nRyrs),
#     #              nrow=nByrs, ncol=A, byrow=TRUE)
# }
#
# # Initial List of Lists for Multiple Chains
# init_ll <- lapply(1:n_chains, function(id) init_fn(chain_id = id))
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_DATA.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores) #init=init_ll)
write_rds(bh_fit, "output/stan_fit_DATA_OUTPUT.RDS")
# translate simulated data_list to actual observations
bh_fit<- read_rds("output/stan_fit_DATA_OUTPUT.RDS")
bh_summary <- summary(bh_fit)$summary %>%
as.data.frame(bh_fit) %>%
mutate(variable_mod = (names(bh_fit))) %>%
select(variable_mod, everything()) %>%
as_data_frame()
View(bh_summary)
# parameters  ======================
# data_list - holds simulated values, this is from: simulate_data_age_structure.R
params<-bh_summary %>%
slice(1:6)
params %>%
ggplot() +
geom_linerange(aes(mean, ymin = `2.5%`,ymax = `97.5%`)) +
geom_crossbar(aes(mean, mean, ymin = `25%`, ymax = `75%`), fill= 'grey') +
facet_wrap(~variable_mod, scales = 'free')
