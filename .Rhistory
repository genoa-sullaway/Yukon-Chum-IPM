filter(!recruits == 0)
return(sr)
}
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 0.04, beta = 9.3*10^-7)
# Plot the simulated time series
plot(sim_yukon_fall$recruits, sim_yukon_fall$spawners, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
sim_spawners<-function(initial_population){
# Set parameters for the exponential growth model
num_time_steps <- 100    # Number of time steps
r <- rnorm(mean=0, sd=1, n=num_time_steps)  # Intrinsic growth rate
# Create an empty vector to store the population data
population <- numeric(num_time_steps)
# Initialize the first time step with the initial population size
population[1] <- initial_population
# Simulate the population dynamics using growth model
for (t in 2:num_time_steps) {
population[t] <- population[t - 1] * exp(r[t])
}
# Create a time vector
time <- 1:num_time_steps
return(population)
}
spawners_yukon_fall <- sim_spawners(initial_population = mean(yukon_fall$Estimated_Run))
spawners_kusko <- sim_spawners(initial_population = mean(kusko$pred_N_est))
# Plot the simulated time series
#plot(1:100, spawners_yukon_fall , type = "l", xlab = "Time", ylab = "S")
# now that I have a spawner population, assign alpha and beta and calculate recruits?
# Bev Holt Function  ====================================================================================
bev_holt_sim_function <- function(spawners, alpha, beta){ # Initial population size
#alpha <-0.019  # Parameter alpha
#beta <- 9.3*10^-7      # Parameter beta
num_time_steps <- 100     # Number of time steps
# Create an empty vector to store the population data
recruits <- numeric(num_time_steps)
# Simulate the population dynamics using the Beverton-Holt model with alpha and beta
for (t in 2:num_time_steps) {
recruits[t] <- (alpha * spawners[t]) / (1 + beta * spawners[t])
}
# Create a time vector
sr<-data_frame("time" = c(1:num_time_steps),
"recruits" = recruits, "spawners"=spawners) %>%
filter(!recruits == 0)
return(sr)
}
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 0.04, beta = 9.3*10^-7)
# Plot the simulated time series
plot(sim_yukon_fall$recruits, sim_yukon_fall$spawners, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
# Plot the simulated time series
plot(1:100, spawners_yukon_fall , type = "l", xlab = "Time", ylab = "S")
sim_spawners<-function(initial_population){
# Set parameters for the exponential growth model
num_time_steps <- 100    # Number of time steps
r <- rnorm(mean=0.001, sd=1, n=num_time_steps)  # Intrinsic growth rate
# Create an empty vector to store the population data
population <- numeric(num_time_steps)
# Initialize the first time step with the initial population size
population[1] <- initial_population
# Simulate the population dynamics using growth model
for (t in 2:num_time_steps) {
population[t] <- population[t - 1] * exp(r[t])
}
# Create a time vector
time <- 1:num_time_steps
return(population)
}
spawners_yukon_fall <- sim_spawners(initial_population = mean(yukon_fall$Estimated_Run))
# Plot the simulated time series
plot(1:100, spawners_yukon_fall , type = "l", xlab = "Time", ylab = "S")
sim_spawners<-function(initial_population){
# Set parameters for the exponential growth model
num_time_steps <- 100    # Number of time steps
r <- rnorm(mean=0.01, sd=1, n=num_time_steps)  # Intrinsic growth rate
# Create an empty vector to store the population data
population <- numeric(num_time_steps)
# Initialize the first time step with the initial population size
population[1] <- initial_population
# Simulate the population dynamics using growth model
for (t in 2:num_time_steps) {
population[t] <- population[t - 1] * exp(r[t])
}
# Create a time vector
time <- 1:num_time_steps
return(population)
}
spawners_yukon_fall <- sim_spawners(initial_population = mean(yukon_fall$Estimated_Run))
# Plot the simulated time series
plot(1:100, spawners_yukon_fall , type = "l", xlab = "Time", ylab = "S")
spawners_yukon_fall
sim_spawners<-function(initial_population){
# Set parameters for the exponential growth model
num_time_steps <- 100    # Number of time steps
r <- rnorm(mean=0.01, sd=0.5, n=num_time_steps)  # Intrinsic growth rate
# Create an empty vector to store the population data
population <- numeric(num_time_steps)
# Initialize the first time step with the initial population size
population[1] <- initial_population
# Simulate the population dynamics using growth model
for (t in 2:num_time_steps) {
population[t] <- population[t - 1] * exp(r[t])
}
# Create a time vector
time <- 1:num_time_steps
return(population)
}
spawners_yukon_fall <- sim_spawners(initial_population = mean(yukon_fall$Estimated_Run))
# Plot the simulated time series
plot(1:100, spawners_yukon_fall , type = "l", xlab = "Time", ylab = "S")
spawners_kusko <- sim_spawners(initial_population = mean(kusko$pred_N_est))
# Plot the simulated time series
plot(1:100, spawners_yukon_fall , type = "l", xlab = "Time", ylab = "S")
spawners_yukon_fall
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 10, beta = 9.3*10^-7)
# Plot the simulated time series
plot(sim_yukon_fall$recruits, sim_yukon_fall$spawners, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 100, beta = 9.3*10^-7)
# Plot the simulated time series
plot(sim_yukon_fall$recruits, sim_yukon_fall$spawners, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 5, beta = 9.3*10^-7)
# Plot the simulated time series
plot(sim_yukon_fall$recruits, sim_yukon_fall$spawners, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 0.001, beta = 9.3*10^-7)
# Plot the simulated time series
plot(sim_yukon_fall$recruits, sim_yukon_fall$spawners, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 0.02, beta = 9.3*10^-7)
View(sim_yukon_fall)
# Plot the simulated time series
plot(sim_yukon_fall$spawners, sim_yukon_fall$recruits, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 0.02, beta = 9.3*10^-5)
# Plot the simulated time series
plot(sim_yukon_fall$spawners, sim_yukon_fall$recruits, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 0.02, beta = 9.3*10^-6)
# Plot the simulated time series
plot(sim_yukon_fall$spawners, sim_yukon_fall$recruits, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
sim_kusko <- bev_holt_sim_function(spawners = spawners_kusko, alpha = 0.05, beta = 7*10^-6)
plot(sim_kusko$spawners, sim_kusko$recruits, type = "l", xlab = "S", ylab = "R",
main = "Simulated Salmon Population (Beverton-Holt Model - Alpha/Beta Parameterization)")
plot(sim_kusko$spawners, sim_kusko$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Kusko")
# Plot the simulated time series
plot(sim_yukon_fall$spawners, sim_yukon_fall$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Fall Yukon")
library(readxl)
yukon_spring <- read_excel("data/Yukon_Escapement_ADFG/Yukon Summer Chum Total Run 1978-2022 Run Rec.xlsx")
View(yukon_spring)
spawners_yukon_spring <- sim_spawners(initial_population = mean(yukon_spring$Escapement))
plot(1:100, spawners_kusko , type = "l", xlab = "Time", ylab = "S")
plot(1:100, spawners_yukon_spring , type = "l", xlab = "Time", ylab = "S")
# now that I have a spawner population, assign alpha and beta and calculate recruits?
# Bev Holt Function  ====================================================================================
bev_holt_sim_function <- function(spawners, alpha, beta){ # Initial population size
#alpha <-0.019  # Parameter alpha
#beta <- 9.3*10^-7      # Parameter beta
num_time_steps <- 100     # Number of time steps
# Create an empty vector to store the population data
recruits <- numeric(num_time_steps)
# Simulate the population dynamics using the Beverton-Holt model with alpha and beta
for (t in 2:num_time_steps) {
recruits[t] <- (alpha * spawners[t]) / (1 + beta * spawners[t])
}
# Create a time vector
sr<-data_frame("time" = c(1:num_time_steps),
"recruits" = recruits, "spawners"=spawners) %>%
filter(!recruits == 0)
return(sr)
}
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.04, beta = 8*10^-6)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.03, beta = 8*10^-6)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.03, beta = 8*10^-7)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.03, beta = 8*10^-5)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.03, beta = 8*10^-5)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.03, beta = 8*10^-4)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.05, beta = 7*10^-6)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
plot(1:100, spawners_yukon_spring , type = "l", xlab = "Time", ylab = "S")
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.02, beta = 7*10^-6)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
spawners_yukon_spring <- sim_spawners(initial_population = mean(yukon_spring$Escapement))
plot(1:100, spawners_yukon_spring , type = "l", xlab = "Time", ylab = "S")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.02, beta = 7*10^-6)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
n = length(sim_yukon_fall)
n = nrow(sim_yukon_fall)
library(rstan)
# to start, use simulated data from "scripts/simulate_data.R"
# first try with 1 stock, then will build heirarchical to 3 stocks
#df <- read_csv("data/input_dat_stan.csv")
sim_yukon_fall
warmups <- 1000
total_iterations <- 2000
max_treedepth <-  10
n_chains <-  4
n_cores <- 4
adapt_delta <- 0.95
data <- list(n = nrow(sim_yukon_fall),
r = sim_yukon_fall$recruits,
ssb = sim_yukon_fall$spawners,
max_r = max(sim_yukon_fall$recruits))
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
init = list(
list(
log_alpha = log(1 * data$max_r),
log_beta = log(2* max(df$ssb))
),
list(
log_alpha = log(3 * data$max_r),
log_beta = log(.5 *max(df$ssb))
),
list(
log_alpha = log(1 * data$max_r),
log_beta = log(1.1*max(df$ssb))
),
list(
log_alpha = log(.8 * data$max_r),
log_beta = log(5*max(df$ssb))
)
),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
init = list(
list(
log_alpha = log(1 * data$max_r),
log_beta = log(2* max(df$ssb))
),
list(
log_alpha = log(3 * data$max_r),
log_beta = log(.5 *max(df$ssb))
),
list(
log_alpha = log(1 * data$max_r),
log_beta = log(1.1*max(df$ssb))
),
list(
log_alpha = log(.8 * data$max_r),
log_beta = log(5*max(df$ssb))
)
),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
init = list(
list(
log_alpha = log(1 * data$max_r),
log_beta = log(2* max(df$ssb))
),
list(
log_alpha = log(3 * data$max_r),
log_beta = log(.5 *max(df$ssb))
),
list(
log_alpha = log(1 * data$max_r),
log_beta = log(1.1*max(df$ssb))
),
list(
log_alpha = log(.8 * data$max_r),
log_beta = log(5*max(df$ssb))
)
),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
rstanarm::launch_shinystan(bh_fit)
summary(bh_fit)$summary %>% head(20)
# plot observed vs predicted alpha and beta
alpha <-bh_fit$alpha
bh_fit$alpha
bh_fit$alpha
summary(bh_fit)
summary(bh_fit)$alpha
summ<-summary(bh_fit)
View(summ)
summ<-summary(bh_fit)$summary
View(summ)
summary_df<-summary(bh_fit)$summary %>%
rownames_to_column()
library(tidyverse)
summary_df<-summary(bh_fit)$summary %>%
rownames_to_column()
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names") # Apply rownames_to_column
View(summary_df)
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")  %>%
filter(row_names %in% c("alpha", "beta", "log_beta"))
View(summary_df)
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")  %>%
filter(row_names %in% c("alpha", "beta", "log_beta"))
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")  %>%
data.frame() %>%
filter(row_names %in% c("alpha", "beta", "log_beta"))
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")  %>%
filter(row_names == "alpha")
head(summary_df)
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
rownames_to_column("row_names")
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")
summary_df<-summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")  %>%
dplyr::filter(row_names %in% c("alpha", "beta", "log_beta"))
View(summary_df)
library(tidyverse)
# Observed ======================
obs_df <- data.frame(id = c("observed","observed"),
row.names = c("alpha", "beta")
mean =c(0.02, 9.3*10^-6),
se_mean = c(0,0))
# Observed ======================
obs_df <- data.frame(id = c("observed","observed"),
row.names = c("alpha", "beta")
mean =c(0.02, 9.3*10^-6),
se_mean = c(0,0))
# Observed ======================
obs_df <- data.frame(id = c("observed","observed"),
row.names = c("alpha", "beta"),
mean =c(0.02, 9.3*10^-6),
se_mean = c(0,0))
summary_df <- summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")  %>%
dplyr::filter(row_names %in% c("alpha", "beta")) %>%
dplyr::mutate(id = "predicted") %>%
dplyr::select(id, row_names, mean, se_mean) %>%
rbind(obs_df )
summary_df <- summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")  %>%
dplyr::filter(row_names %in% c("alpha", "beta")) %>%
dplyr::mutate(id = "predicted") %>%
dplyr::select(id, row_names, mean, se_mean)
# library(tidybayes)
library(tidyverse)
# Observed ======================
obs_df <- data.frame(id = c("observed","observed"),
row.names = c("alpha", "beta"),
mean =c(0.02, 9.3*10^-6),
se_mean = c(0,0))
summary_df <- summary(bh_fit)$summary %>%
data.frame() %>%
tibble::rownames_to_column("row_names")  %>%
dplyr::filter(row_names %in% c("alpha", "beta")) %>%
dplyr::mutate(id = "predicted") %>%
dplyr::select(id, row_names, mean, se_mean) %>%
rbind(obs_df )
summary_df <- summary(bh_fit)$summary
summary(bh_fit)
summary_df <- summary(bh_fit)
library(tidybayes)
install.packages(tidybayes)
install.packages("tidybayes")
install.packages("tidybayes")
library(tidybayes)
library(tidyverse)
library(tidybayes)
install.packages("tidyverse")
library(tidyverse)
library(tidybayes)
summary_df <- summary(bh_fit)$summary
# Predicted ======================
# rstanarm::launch_shinystan(bh_fit)
# head(summary_df)
summary(bh_fit)
# Predicted ======================
# rstanarm::launch_shinystan(bh_fit)
# head(summary_df)
extract(bh_fit)
list_of_draws <- extract(bh_fit)
View(bh_fit)
library(here)
library(tidyverse)
library(readxl)
# Purpose =============================================================================
# per advice of Megan, simulate data with known parameters so you can make sure your code is running correctly
# This simulates spawners, basically using a random walk?
# then uses beverton holt to calculate recruits based on known alpha and beta
# now I can use the spawner recruit to build a bayesian beverton holt estimation
# Load run reconstruction data  ========================================================
# to get mean to put in as initial population size for each stock
yukon_fall<- read_csv("data/Yukon_Escapement_ADFG/Yukon_Fall_Chum_RR_JTC.csv")
yukon_spring <- read_excel("data/Yukon_Escapement_ADFG/Yukon Summer Chum Total Run 1978-2022 Run Rec.xlsx")
kusko_estimated_parameters<- readRDS("output/optim_output_par_data2021.RDS")
kusko<-data.frame(Year = c(1988:(upper_year-1)),
pred_N_est= as.vector(c(kusko_estimated_parameters[2:35])))
sim_spawners<-function(initial_population){
# Set parameters for the exponential growth model
num_time_steps <- 100    # Number of time steps
r <- rnorm(mean=0.01, sd=0.5, n=num_time_steps)  # Intrinsic growth rate
# Create an empty vector to store the population data
population <- numeric(num_time_steps)
# Initialize the first time step with the initial population size
population[1] <- initial_population
# Simulate the population dynamics using growth model
for (t in 2:num_time_steps) {
population[t] <- population[t - 1] * exp(r[t])
}
return(population)
}
spawners_yukon_fall <- sim_spawners(initial_population = mean(yukon_fall$Estimated_Run))
spawners_kusko <- sim_spawners(initial_population = mean(kusko$pred_N_est))
spawners_yukon_spring <- sim_spawners(initial_population = mean(yukon_spring$Escapement))
# Plot the simulated time series
plot(1:100, spawners_yukon_fall , type = "l", xlab = "Time", ylab = "S")
plot(1:100, spawners_kusko , type = "l", xlab = "Time", ylab = "S")
plot(1:100, spawners_yukon_spring , type = "l", xlab = "Time", ylab = "S")
# now that I have a spawner population, assign alpha and beta and calculate recruits?
# Bev Holt Function  ====================================================================================
bev_holt_sim_function <- function(spawners, alpha, beta){ # Initial population size
#alpha <-0.019  # Parameter alpha
#beta <- 9.3*10^-7      # Parameter beta
num_time_steps <- 100     # Number of time steps
# Create an empty vector to store the population data
recruits <- numeric(num_time_steps)
# Simulate the population dynamics using the Beverton-Holt model with alpha and beta
for (t in 2:num_time_steps) {
recruits[t] <- (alpha * spawners[t]) / (1 + beta * spawners[t])
}
# Create a time vector
sr<-data_frame("time" = c(1:num_time_steps),
"recruits" = recruits, "spawners"=spawners) %>%
filter(!recruits == 0)
return(sr)
}
# Simulate 3 stocks ===========
sim_yukon_fall <- bev_holt_sim_function(spawners = spawners_yukon_fall, alpha = 0.02, beta = 9.3*10^-6)
# Plot the simulated time series
plot(sim_yukon_fall$spawners, sim_yukon_fall$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Fall Yukon")
sim_kusko <- bev_holt_sim_function(spawners = spawners_kusko, alpha = 0.05, beta = 7*10^-6)
plot(sim_kusko$spawners, sim_kusko$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Kusko")
sim_yukon_spring <- bev_holt_sim_function(spawners = spawners_yukon_spring,
alpha = 0.02, beta = 7*10^-6)
plot(sim_yukon_spring$spawners, sim_yukon_spring$recruits, type = "p", xlab = "S", ylab = "R",
main = "Simulated Spring Yukon")
library(here)
library(tidyverse)
library(readxl)
# Load run reconstruction data  ========================================================
# to get mean to put in as initial population size for each stock
yukon_fall<- read_csv("data/Yukon_Escapement_ADFG/Yukon_Fall_Chum_RR_JTC.csv")
