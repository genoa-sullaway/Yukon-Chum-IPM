N_egg_start_log=N_egg_start_log,
sigma_y_j=process_error_j,
log_catch_q = log_catch_q,
D_scale=D_scale,
Ps=Ps,
fs=fs,
M = M_fill_stan,
log_c_1 = log_c_1,
log_c_2=log_c_2,
data_stage_j = N_j_sim_hat,#[6:nByrs+1],
data_stage_return = N_recruit_sim_s,#[6:nRyrs+2],
data_stage_sp = N_sp_sim_s,#[6:nRyrs+2],
data_stage_harvest = N_catch_sim_s,#[6:nRyrs+2],
kappa_marine_mort_start = c(-log(basal_p_2), -log(basal_p_2)),
kappa_marine_start = c(basal_p_2, basal_p_2),
p_1 = p_1,
p_2=p_2,
g=g,
kappa_j_start = basal_p_1,
basal_p_1 = basal_p_1,
basal_p_2 = basal_p_2,
ncovars1=ncovars1,
ncovars2=ncovars2,
F = F,
# data_sp_cv = process_error_sp,
cov1 = matrix(nrow = nByrs_stan, ncol = ncovars1, rep(rnorm(nByrs_stan, 0, 1), times = ncovars1)),
cov2 = matrix(nrow = nByrs_stan, ncol = ncovars2, rep(rnorm(nByrs_stan, 0, 1), times = ncovars2)),
# cov1=cov1[8:nByrs,ncovars1],
# cov2=cov2[7:nByrs,ncovars2],
#
o_run_comp=o_run_comp,#[8:nByrs,],
ess_age_comp=ess_age_comp)#[8:(nByrs-1)] )
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_SIM.stan"), # different than data model so I can move priors around
data = data_list_stan,
chains = 1, #n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
control = list(adapt_delta = 0.95,
max_treedepth = 12))
write_rds(bh_fit, "output/stan_fit_SIMULATED_OUTPUT.RDS")
# plot pi  =================
pi_df <- summary(bh_fit, pars = c("pi"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
cbind( data.frame(obs= data_list_plot$pi))
ggplot(data= pi_df) +
geom_point(aes(x=rowname, y = mean  )) +
geom_point(aes(x=rowname, y = obs), color = "red", alpha = 0.5)
# PLOT data =======
data_list_plot <-    list(nByrs=nByrs_stan,
nRyrs=nRyrs_stan,
nRyrs_T = nRyrs_T_stan,
A=A,
t_start = t_start,
prob = prob,
pi = pi,
Ps=Ps,
fs=fs,
M = M_fill_stan,
log_c_1 = log_c_1,
log_c_2=log_c_2,
data_stage_j = N_j_sim_hat,#[6:nByrs+1],
data_stage_return = N_recruit_sim_s,#[6:nRyrs+2],
data_stage_sp = N_sp_sim_s,#[6:nRyrs+2],
data_stage_harvest = N_catch_sim_s,#[6:nRyrs+2],
kappa_j = kappa_j,
kappa_marine = kappa_marine,
kappa_marine_mortality = kappa_marine_mortality,
kappa_marine_mort_start = c(-log(basal_p_2), -log(basal_p_2)),
kappa_marine_start = c(basal_p_2, basal_p_2),
kappa_j_start = basal_p_1,
basal_p_1 = basal_p_1,
basal_p_2 = basal_p_2,
ncovars1=ncovars1,
ncovars2=ncovars2,
# data_sp_cv = process_error_sp,
cov1 = matrix(nrow = nByrs_stan+1, ncol = ncovars1, rep(rnorm(nByrs_stan+1, 0, 1), times = ncovars1)),
cov2 = matrix(nrow = nByrs_stan+2, ncol = ncovars2, rep(rnorm(nByrs_stan+2, 0, 1), times = ncovars2)),
# cov1=cov1[8:nByrs,ncovars1],
# cov2=cov2[7:nByrs,ncovars2],
g=g,
p =p,
o_run_comp=o_run_comp,#[8:nByrs,],
ess_age_comp=ess_age_comp)#[8:(nByrs-1)] )
# plot pi  =================
pi_df <- summary(bh_fit, pars = c("pi"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
cbind( data.frame(obs= data_list_plot$pi))
ggplot(data= pi_df) +
geom_point(aes(x=rowname, y = mean  )) +
geom_point(aes(x=rowname, y = obs), color = "red", alpha = 0.5)
# plot PROB  =================
prob_df <- summary(bh_fit, pars = c("prob"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
cbind( data.frame(obs= data_list_plot$prob))
ggplot(data= prob_df) +
geom_point(aes(x=rowname, y = mean  )) +
geom_point(aes(x=rowname, y = obs), color = "red", alpha = 0.5) +
labs(caption= "Red is observed, black is predicted")
# plot G  =================
g_df <- summary(bh_fit, pars = c("g"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
cbind( data.frame(obs= data_list_plot$g))
ggplot(data= prob_df) +
geom_point(aes(x=rowname, y = mean  )) +
geom_point(aes(x=rowname, y = obs), color = "red", alpha = 0.5) +
labs(caption= "Red is observed, black is predicted")
# plot age comp through time =================
age_comp_Q <- summary(bh_fit, pars = c("q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:21, each=4),
age = rep(1:4, length.out = nrow(.))) %>%
dplyr::rename(pred = "mean") %>%
dplyr::select(time,age,pred)  %>%
left_join(data.frame(data_list_plot$o_run_comp) %>%
dplyr::mutate(time = 1:nrow(.)) %>%
gather(1:4, key = "age",value = "obs") %>%
mutate(age = case_when(age == "X1" ~ 1,
age == "X2" ~ 2,
age == "X3" ~ 3,
age == "X4" ~ 4)))
ggplot(data= age_comp_Q) +
geom_line(aes(x=time, y = pred, group = age )) +
geom_point(aes(x=time, y = obs, group = age ), color = "red", alpha = 0.5) +
geom_line(aes(x=time, y = obs, group = age ), color = "red", alpha = 0.5) +
facet_wrap(~age, scales = "free")+
labs(caption= "Red is observed, black is predicted")
## mean age comp: ====
age_comp_P <- summary(bh_fit, pars = c("p"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate( age = c(1:4)) %>%
dplyr::rename(pred = "mean") %>%
dplyr::select(age,pred)  %>%
left_join(data.frame(obs = data_list_plot$p) %>%
dplyr::mutate(age = c(1:4)))
ggplot(data= age_comp_P) +
geom_point(aes(x=age, y = pred )) +
geom_point(aes(x=age, y = obs, group = age ), color = "red", alpha = 0.5)
# plot G  =================
g_df <- summary(bh_fit, pars = c("g"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column() %>%
cbind( data.frame(obs= data_list_plot$g))
ggplot(data= prob_df) +
geom_point(aes(x=rowname, y = mean  )) +
geom_point(aes(x=rowname, y = obs), color = "red", alpha = 0.5) +
labs(caption= "Red is observed, black is predicted")
ggplot(data= g_df) +
geom_point(aes(x=rowname, y = mean  )) +
geom_point(aes(x=rowname, y = obs), color = "red", alpha = 0.5) +
labs(caption= "Red is observed, black is predicted")
# copied from here: https://github.com/milos-agathon/map-rivers-with-sf-and-ggplot2-in-R/blob/main/R/rivers_america.r
# AYK MAP THAT SHOWS WEIR PROJECTS, USED IN POSTERS
libs <- c(
"httr", "tidyverse", "sf", "here"
)
# install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == F)) {
install.packages(libs[!installed_libs])
}
# load libraries
invisible(lapply(libs, library, character.only = T))
sysfonts::font_add_google("Montserrat", "Montserrat")
showtext::showtext_auto()
# Load shape file with yukon watershed
# found here: https://www.sciencebase.gov/catalog/item/5813d2b2e4b0bb36a4c29e31
yukon_poly<- sf::st_read("data/11573/11573.shp") %>%
st_make_valid()
# GET RIVERS DATA ============
project <- read.csv("data/project_lat_lon.csv")
fall <- project %>%
filter(Season == "Fall")
summ_fall <- project %>%
filter(Season == "Summer/Fall")
summer <- project %>%
filter(Season == "Summer")
ar_riv <- sf::st_read("HydroRIVERS_v10_ar_shp/HydroRIVERS_v10_ar_shp/HydroRIVERS_v10_ar.shp") %>%
st_cast("MULTILINESTRING")
ariv <- ar_riv %>%
mutate(
width = as.numeric(ORD_FLOW),
width = case_when(
width == 3 ~ 0.8,
width == 4 ~ 0.6,
width == 5 ~ 0.45,
width == 6 ~ 0.35,
width == 7 ~ 0.25,
width == 8 ~ 0.15,
width == 9 ~ 0.1,
width == 10 ~ 0.1,
TRUE ~ 0
)
) %>%
st_as_sf()
ariv$geometry <- ariv$geometry %>%
s2::s2_rebuild() %>%
sf::st_as_sfc()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
bbox <- st_sfc(
st_polygon(list(cbind(
c(-168, -130, -130, -168, -168),
c(52, 52, 80, 70, 52)
))),
crs = crsLONGLAT
)
new_prj <- sf::st_transform(bbox, crs = crsLONGLAT)
bb <- sf::st_bbox(new_prj)
# make mask ========
# use this to make a alpha filer for the yukon watershed
mask <-st_difference(bbox,yukon_poly)
mask2 <-st_difference(mask,na_outline)
plot(mask)
plot(mask2)
both <- st_difference(mask, mask2)
plot(both)
#trim rivers to just be inside AK and part of canada
source("scripts/Function_AKMap.R")
# na_outline <- rbind(ak,can) %>%
#   mutate(ID = "id")
na_outline <- st_union(ak,can)
# make plot with points  ========
p <-ggplot() +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
# geom_sf(data = mask, alpha = 0.7, color = "black") +
geom_sf(data = both, alpha = 0.7, color = "black") +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "yellow", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
coord_sf(
crs = crsLONGLAT,
xlim = c(bb["xmin"], bb["xmax"]),
ylim = c(bb["ymin"], bb["ymax"])
) +
labs(
y = "", subtitle = "",
x = "" ) +
scale_alpha(range = c(0, 1)) +
scale_size(range = c(0, .45)) +
theme_minimal() +
theme(
text = element_text(family = "Montserrat"),
panel.background = element_blank(),
legend.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggsave(
filename = "output/ak_rivers.png",
width = 9, height = 6, dpi = 600,
bg = "white", device = "png", p
)
# make plot with no points ========
p <-ggplot() +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = both, alpha = 0.7, color = "black") +
# geom_sf(data = na_outline, fill = NA, color = "black") +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
coord_sf(
crs = crsLONGLAT,
xlim = c(bb["xmin"], bb["xmax"]),
ylim = c(bb["ymin"], bb["ymax"])
) +
labs(
y = "", subtitle = "",
x = "" ) +
scale_alpha(range = c(0, 1)) +
scale_size(range = c(0, .45)) +
theme_minimal() +
theme(
text = element_text(family = "Montserrat"),
panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
rect = element_rect(fill = "transparent")
)
# copied from here: https://github.com/milos-agathon/map-rivers-with-sf-and-ggplot2-in-R/blob/main/R/rivers_america.r
# AYK MAP THAT SHOWS WEIR PROJECTS, USED IN POSTERS
libs <- c(
"httr", "tidyverse", "sf", "here"
)
# install missing libraries
installed_libs <- libs %in% rownames(installed.packages())
if (any(installed_libs == F)) {
install.packages(libs[!installed_libs])
}
# load libraries
invisible(lapply(libs, library, character.only = T))
sysfonts::font_add_google("Montserrat", "Montserrat")
showtext::showtext_auto()
# Load shape file with yukon watershed
# found here: https://www.sciencebase.gov/catalog/item/5813d2b2e4b0bb36a4c29e31
yukon_poly<- sf::st_read("data/11573/11573.shp") %>%
st_make_valid()
# GET RIVERS DATA ============
project <- read.csv("data/project_lat_lon.csv")
fall <- project %>%
filter(Season == "Fall")
summ_fall <- project %>%
filter(Season == "Summer/Fall")
summer <- project %>%
filter(Season == "Summer")
ar_riv <- sf::st_read("HydroRIVERS_v10_ar_shp/HydroRIVERS_v10_ar_shp/HydroRIVERS_v10_ar.shp") %>%
st_cast("MULTILINESTRING")
ariv <- ar_riv %>%
mutate(
width = as.numeric(ORD_FLOW),
width = case_when(
width == 3 ~ 0.8,
width == 4 ~ 0.6,
width == 5 ~ 0.45,
width == 6 ~ 0.35,
width == 7 ~ 0.25,
width == 8 ~ 0.15,
width == 9 ~ 0.1,
width == 10 ~ 0.1,
TRUE ~ 0
)
) %>%
st_as_sf()
ariv$geometry <- ariv$geometry %>%
s2::s2_rebuild() %>%
sf::st_as_sfc()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
bbox <- st_sfc(
st_polygon(list(cbind(
c(-168, -130, -130, -168, -168),
c(52, 52, 80, 70, 52)
))),
crs = crsLONGLAT
)
new_prj <- sf::st_transform(bbox, crs = crsLONGLAT)
bb <- sf::st_bbox(new_prj)
# make mask ========
# use this to make a alpha filer for the yukon watershed
mask <-st_difference(bbox,yukon_poly)
mask2 <-st_difference(mask,na_outline)
plot(mask)
plot(mask2)
both <- st_difference(mask, mask2)
plot(both)
#trim rivers to just be inside AK and part of canada
source("scripts/Function_AKMap.R")
# na_outline <- rbind(ak,can) %>%
#   mutate(ID = "id")
na_outline <- st_union(ak,can)
# make plot with points  ========
p <-ggplot() +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
# geom_sf(data = mask, alpha = 0.7, color = "black") +
geom_sf(data = both, alpha = 0.7, color = "black") +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "yellow", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
coord_sf(
crs = crsLONGLAT,
xlim = c(bb["xmin"], bb["xmax"]),
ylim = c(bb["ymin"], bb["ymax"])
) +
labs(
y = "", subtitle = "",
x = "" ) +
scale_alpha(range = c(0, 1)) +
scale_size(range = c(0, .45)) +
theme_minimal() +
theme(
text = element_text(family = "Montserrat"),
panel.background = element_blank(),
legend.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
both <- st_difference(mask, mask2)
# make plot with points  ========
p <-ggplot() +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = mask, alpha = 0.7, color = "black") +
# geom_sf(data = both, alpha = 0.7, color = "black") +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "yellow", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
coord_sf(
crs = crsLONGLAT,
xlim = c(bb["xmin"], bb["xmax"]),
ylim = c(bb["ymin"], bb["ymax"])
) +
labs(
y = "", subtitle = "",
x = "" ) +
scale_alpha(range = c(0, 1)) +
scale_size(range = c(0, .45)) +
theme_minimal() +
theme(
text = element_text(family = "Montserrat"),
panel.background = element_blank(),
legend.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
p
mask <-st_difference(bbox,yukon_poly)
mask2 <-st_difference(mask,na_outline)
both <- st_difference(mask, mask2)
mask <-st_difference(bb,yukon_poly)
# make plot with points  ========
p <-ggplot() +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
# geom_sf(data = mask, alpha = 0.7, color = "black") +
# geom_sf(data = both, alpha = 0.7, color = "black") +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "yellow", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
coord_sf(
crs = crsLONGLAT,
xlim = c(bb["xmin"], bb["xmax"]),
ylim = c(bb["ymin"], bb["ymax"])
) +
labs(
y = "", subtitle = "",
x = "" ) +
scale_alpha(range = c(0, 1)) +
scale_size(range = c(0, .45)) +
theme_minimal() +
theme(
text = element_text(family = "Montserrat"),
panel.background = element_blank(),
legend.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
p
