## same plot but linear scatter plot =========
### dont mean scale data =====
juv_rec_obs_absolute <- juv_rec_obs_temp %>%
dplyr::select(1,2,7) %>%
gather(2:3, key = "id", value = "mean") %>%
left_join( juv_rec_obs_temp %>%
dplyr::select(1,5,8) %>%
dplyr::rename(juv = "juv_sd",
rec = "rec_sd") %>%
gather(2:3, key = "id", value = "sd"))  %>%
group_by(id) %>%
dplyr::mutate(mean = as.numeric(scale(mean)),
mean =mean - min(mean))  %>%
select(brood_year, id,mean) %>%
spread(id,mean)
ggplot(data = juv_rec_obs_spread, aes(x=juv, y = rec, color = (brood_year))) +
geom_point() +
geom_abline(slope =1) +
geom_smooth(method = "lm")
ggplot(data = juv_rec_obs_absolute, aes(x=juv, y = rec, color = (brood_year))) +
geom_point() +
geom_abline(slope =1) +
geom_smooth(method = "lm")
ggplot(data = juv_rec_obs_absolute %>% filter(!brood_year >2015), aes(x=juv, y = rec, color = (brood_year))) +
geom_point() +
geom_abline(slope =1) +
geom_smooth(method = "lm")
install.packages("ggpmisc")
library(ggpmisc)
install.packages("ggpmisc")
library(ggpmisc)
mod <- lm(juv_rec_obs_absolute$juv~juv_rec_obs_absolute$rec, data= juv_rec_obs_absolute)
summary(mod)
mod <- lm(juv_rec_obs_absolute$juv~juv_rec_obs_absolute$rec, data= juv_rec_obs_absolute%>% filter(!brood_year >2015))
summary(mod)
plot(resid(mod))
resid <- resid(mod)
juv_rec_obs_absolute$resid <- resid(mod)
View(juv_rec_obs_absolute)
ggplot(data=juv_rec_obs_absolute, x= brood_year, y = resid) +
geom_point()
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid)) +
geom_point()
mod <- lm(juv_rec_obs_absolute$rec~juv_rec_obs_absolute$juv, data= juv_rec_obs_absolute%>% filter(!brood_year >2015))
juv_rec_obs_absolute$resid <- resid(mod)
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid)) +
geom_point()
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0)
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 1, linetype = 2) +
geom_hline(yintercept = -1, linetype = 2)
juv_rec_obs_absolute$resid <- resid(mod)
juv_rec_obs_absolute <- juv_rec_obs_absolute %>%
dplyr::mutate(color_id = case_when(resid >0 ~ "juv",
resid <0 ~ "rec"))
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid, color = color_id)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 1, linetype = 2) +
geom_hline(yintercept = -1, linetype = 2)
juv_rec_obs_absolute <- juv_rec_obs_absolute %>%
dplyr::mutate(color_id = case_when(resid >1 ~ "juv",
resid <-1 ~ "rec"))
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid, color = color_id)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 1, linetype = 2) +
geom_hline(yintercept = -1, linetype = 2)
## same plot but linear scatter plot =========
### dont mean scale data =====
juv_rec_obs_absolute <- juv_rec_obs_temp %>%
dplyr::select(1,2,7) %>%
gather(2:3, key = "id", value = "mean") %>%
left_join( juv_rec_obs_temp %>%
dplyr::select(1,5,8) %>%
dplyr::rename(juv = "juv_sd",
rec = "rec_sd") %>%
gather(2:3, key = "id", value = "sd"))  %>%
group_by(id) %>%
dplyr::mutate(mean = as.numeric(scale(mean)),
mean =mean - min(mean))  %>%
select(brood_year, id,mean) %>%
spread(id,mean)
ggplot(data = juv_rec_obs_absolute %>% filter(!brood_year >2015),
aes(x=juv, y = rec, color = brood_year)) +
geom_point() +
geom_abline(slope =1) +
geom_smooth(method = "lm")
mod <- lm(juv_rec_obs_absolute$rec~juv_rec_obs_absolute$juv, data= juv_rec_obs_absolute%>% filter(!brood_year >2015))
summary(mod)
plot(resid(mod))
juv_rec_obs_absolute$resid <- resid(mod)
juv_rec_obs_absolute <- juv_rec_obs_absolute %>%
dplyr::mutate(color_id = case_when(resid >1 ~ "juv",
resid <-1 ~ "rec"))
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid, color = color_id)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 1, linetype = 2) +
geom_hline(yintercept = -1, linetype = 2)
juv_rec_obs_absolute$resid <- resid(mod)
juv_rec_obs_absolute <- juv_rec_obs_absolute %>%
dplyr::mutate(color_id = case_when(resid >1 ~ "juv",
resid <-1 ~ "rec",
TRUE ~ NA))
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid, color = color_id)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 1, linetype = 2) +
geom_hline(yintercept = -1, linetype = 2)
juv_rec_obs_absolute <- juv_rec_obs_absolute %>%
dplyr::mutate(color_id = case_when(resid >1 ~ "juv",
resid <-1 ~ "rec",
TRUE ~ "none"))
juv_rec_obs_absolute <- juv_rec_obs_absolute %>%
dplyr::mutate(color_id = case_when(resid > 1 ~ "juv",
resid < -1 ~ "rec",
TRUE ~ "none"))
ggplot(data=juv_rec_obs_absolute,aes(x= brood_year, y = resid, color = color_id)) +
geom_point() +
theme_classic() +
geom_hline(yintercept = 0) +
geom_hline(yintercept = 1, linetype = 2) +
geom_hline(yintercept = -1, linetype = 2)
# copied from here: https://github.com/milos-agathon/map-rivers-with-sf-and-ggplot2-in-R/blob/main/R/rivers_america.r
# AYK MAP THAT SHOWS WEIR PROJECTS, USED IN POSTERS
library("httr")
library("tidyverse")
library("sf")
library("here")
library("raster")
sf_use_s2(FALSE)
# Load shape file with yukon watershed
# found here: https://www.sciencebase.gov/catalog/item/5813d2b2e4b0bb36a4c29e31
yukon_poly<- sf::st_read("data/11573/11573.shp") %>%
st_make_valid()
# GET RIVERS DATA ============
project <- read.csv("data/project_lat_lon.csv")
fall <- project %>%
filter(Season == "Fall")
summ_fall <- project %>%
filter(Season == "Summer/Fall")
summer <- project %>%
filter(Season == "Summer")
ar_riv <- sf::st_read("HydroRIVERS_v10_ar_shp/HydroRIVERS_v10_ar_shp/HydroRIVERS_v10_ar.shp") %>%
st_cast("MULTILINESTRING")
ariv <- ar_riv %>%
mutate(
width = as.numeric(ORD_FLOW),
width = case_when(
width == 3 ~ 0.8,
width == 4 ~ 0.6,
width == 5 ~ 0.45,
width == 6 ~ 0.35,
width == 7 ~ 0.25,
width == 8 ~ 0.15,
width == 9 ~ 0.1,
width == 10 ~ 0.1,
TRUE ~ 0
)
) %>%
st_as_sf()
ariv$geometry <- ariv$geometry %>%
s2::s2_rebuild() %>%
sf::st_as_sfc()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
bbox <- st_sfc(
st_polygon(list(cbind(
c(-168, -130, -130, -168, -168),
c(52, 52, 80, 70, 52)
))),
crs = crsLONGLAT
)
new_prj <- sf::st_transform(bbox, crs = crsLONGLAT)
bb <- sf::st_bbox(new_prj)
# make mask ========
# trim rivers to just be inside AK and part of canada
source("scripts/Function_AKMap.R")
na_outline <- st_union(ak,can)
# use this to make a alpha filter that highlights the yukon watershed
plot(yukon_poly)
plot(bbox)
ggplot() +
geom_sf(data = yukon_poly ) +
geom_sf(data = bbox, alpha = 0.5)
mask <-sf::st_difference(bbox,yukon_poly)
mask2 <-st_difference(mask,na_outline)
plot(mask)
plot(mask2)
both <- st_difference(mask, mask2)
View(summ_fall)
# weir projects ============
project <- read.csv("data/project_lat_lon.csv")
View(project)
summ_fall <- project %>%
filter(Project == "Pilot Station Sonar")
View(summ_fall)
summ_fall <- project %>%
filter(project == "Pilot Station Sonar")
summ_fall <- project %>%
filter(Project.Name == "Pilot Station Sonar")
View(summ_fall)
summ_fall <- project %>%
filter(Project.Name == "Pilot Station Sonar") %>%
mutate(value = 0.5)
p <-ggplot() +
geom_sf(data = na_outline, fill = "white") +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = both, alpha = 0.7, color = "black" ) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
# geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
geom_col(data = summ_fall,x=Lon, y = Lat,fill = value ) +
coord_polar(theta = "y")
# copied from here: https://github.com/milos-agathon/map-rivers-with-sf-and-ggplot2-in-R/blob/main/R/rivers_america.r
# AYK MAP THAT SHOWS WEIR PROJECTS, USED IN POSTERS
library("httr")
library("tidyverse")
library("sf")
library("here")
library("raster")
sf_use_s2(FALSE)
# Load shape file with yukon watershed
# found here: https://www.sciencebase.gov/catalog/item/5813d2b2e4b0bb36a4c29e31
yukon_poly<- sf::st_read("data/11573/11573.shp") %>%
st_make_valid()
# weir projects ============
project <- read.csv("data/project_lat_lon.csv")
fall <- project %>%
filter(Season == "Fall")
summ_fall <- project %>%
filter(Project.Name == "Pilot Station Sonar") %>%
mutate(value = 0.5)
summer <- project %>%
filter(Season == "Summer")
# GET RIVERS DATA ============
ar_riv <- sf::st_read("HydroRIVERS_v10_ar_shp/HydroRIVERS_v10_ar_shp/HydroRIVERS_v10_ar.shp") %>%
st_cast("MULTILINESTRING")
ariv <- ar_riv %>%
mutate(
width = as.numeric(ORD_FLOW),
width = case_when(
width == 3 ~ 0.8,
width == 4 ~ 0.6,
width == 5 ~ 0.45,
width == 6 ~ 0.35,
width == 7 ~ 0.25,
width == 8 ~ 0.15,
width == 9 ~ 0.1,
width == 10 ~ 0.1,
TRUE ~ 0
)
) %>%
st_as_sf()
ariv$geometry <- ariv$geometry %>%
s2::s2_rebuild() %>%
sf::st_as_sfc()
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
bbox <- st_sfc(
st_polygon(list(cbind(
c(-168, -130, -130, -168, -168),
c(52, 52, 80, 70, 52)
))),
crs = crsLONGLAT
)
new_prj <- sf::st_transform(bbox, crs = crsLONGLAT)
bb <- sf::st_bbox(new_prj)
# make mask ========
# trim rivers to just be inside AK and part of canada
source("scripts/Function_AKMap.R")
na_outline <- st_union(ak,can)
# use this to make a alpha filter that highlights the yukon watershed
plot(yukon_poly)
plot(bbox)
ggplot() +
geom_sf(data = yukon_poly ) +
geom_sf(data = bbox, alpha = 0.5)
mask <-sf::st_difference(bbox,yukon_poly)
mask2 <-st_difference(mask,na_outline)
plot(mask)
plot(mask2)
both <- st_difference(mask, mask2)
plot(both)
# make plot with points  ========
p <-ggplot() +
geom_sf(data = na_outline, fill = "white") +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = both, alpha = 0.7, color = "black" ) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
# geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
geom_col(data = summ_fall,x=Lon, y = Lat,fill = value ) +
coord_polar(theta = "y")
project <- read.csv("data/project_lat_lon.csv") %>%
filter(River == "Yukon",
!Project.Name == "Pilot Station Sonar")
fall <- project %>%
filter(Season == "Fall",
!Project.Name == "Pilot Station Sonar")
summ_fall <- project %>%
filter(Project.Name == "Pilot Station Sonar") %>%
mutate(value = 0.5)
summer <- project %>%
filter(Season == "Summer")
ggplot() +
geom_sf(data = na_outline, fill = "white") +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = both, alpha = 0.7, color = "black" ) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
# geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
geom_col(data = summ_fall,aes(x=Lon, y = Lat,fill = value ))
fall
ggplot() +
geom_sf(data = na_outline, fill = "white") +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = both, alpha = 0.7, color = "black" ) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
# geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
geom_col(data = summ_fall,aes(x=Lon, y = Lat, fill = value )) +
scale_fill_manual(value = c("orange", "darkgreen"))
ggplot() +
geom_sf(data = na_outline, fill = "white") +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = both, alpha = 0.7, color = "black" ) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
# geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
geom_col(data = summ_fall,aes(x=Lon, y = Lat, fill = value )) +
scale_fill_manual(values = c("orange", "darkgreen"))
summer
summ_fall
summ_fall <- project %>%
filter(Project.Name == "Pilot Station Sonar") %>%
mutate(value = 0.5)
summ_fall
# weir projects ============
project <- read.csv("data/project_lat_lon.csv") %>%
filter(River == "Yukon")
fall <- project %>%
filter(Season == "Fall",
!Project.Name == "Pilot Station Sonar")
summ_fall <- project %>%
filter(Project.Name == "Pilot Station Sonar") %>%
mutate(value = 0.5)
summer <- project %>%
filter(Season == "Summer",
!Project.Name == "Pilot Station Sonar")
# make plot with points  ========
p <- ggplot() +
geom_sf(data = na_outline, fill = "white") +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = both, alpha = 0.7, color = "black" ) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
# geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
geom_col(data = summ_fall,aes(x=Lon, y = Lat, fill = value )) +
scale_fill_manual(values = c("orange", "darkgreen")) +
coord_polar(theta = "y") +
coord_sf(
crs = crsLONGLAT,
xlim = c(bb["xmin"], bb["xmax"]),
ylim = c(bb["ymin"], bb["ymax"])
) +
labs(
y = "", subtitle = "",
x = "" ) +
scale_alpha(range = c(0, 1)) +
scale_size(range = c(0, .45)) +
theme_minimal() +
theme(
text = element_text(family = "Montserrat"),
panel.background = element_blank(),
legend.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggsave(
filename = "output/ak_rivers.png",
width = 9, height = 6, dpi = 600,
bg = "transparent", device = "png", p
)
# copied from here: https://github.com/milos-agathon/map-rivers-with-sf-and-ggplot2-in-R/blob/main/R/rivers_america.r
# AYK MAP THAT SHOWS WEIR PROJECTS, USED IN POSTERS
library("httr")
library("tidyverse")
library("sf")
library("here")
library("raster")
sf_use_s2(FALSE)
# Load shape file with yukon watershed
# found here: https://www.sciencebase.gov/catalog/item/5813d2b2e4b0bb36a4c29e31
yukon_poly<- sf::st_read("data/11573/11573.shp") %>%
st_make_valid()
# weir projects ============
project <- read.csv("data/project_lat_lon.csv") %>%
filter(River == "Yukon")
fall <- project %>%
filter(Season == "Fall")#,
# !Project.Name == "Pilot Station Sonar")
summ_fall <- project %>%
filter(Project.Name == "Pilot Station Sonar") %>%
mutate(value = 0.5)
summer <- project %>%
filter(Season == "Summer")#,
# !Project.Name == "Pilot Station Sonar")
# make plot with points  ========
p <- ggplot() +
geom_sf(data = na_outline, fill = "white") +
geom_sf(data = ariv, aes(
color = factor(ORD_FLOW), size = width, alpha = width
)) +
geom_sf(data = both, alpha = 0.7, color = "black" ) +
scale_color_manual(
name = "",
values = c(
"#08306b", "#1c4680", "#305d94", "#4574a7",
"#5d8cb9", "#77a4cb", "#deebf7", "#deebf7", "#deebf7"), drop = F ) +
# geom_point(data = summ_fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = fall, aes(x=Lon, y = Lat), color= "darkgreen", size = 1 ) +
geom_point(data = summer, aes(x=Lon, y = Lat), color= "orange", size = 1 ) +
# geom_col(data = summ_fall,aes(x=Lon, y = Lat, fill = value )) +
# scale_fill_manual(values = c("orange", "darkgreen")) +
# coord_polar(theta = "y") +
coord_sf(
crs = crsLONGLAT,
xlim = c(bb["xmin"], bb["xmax"]),
ylim = c(bb["ymin"], bb["ymax"])
) +
labs(
y = "", subtitle = "",
x = "" ) +
scale_alpha(range = c(0, 1)) +
scale_size(range = c(0, .45)) +
theme_minimal() +
theme(
text = element_text(family = "Montserrat"),
panel.background = element_blank(),
legend.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.title.y = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank()
)
ggsave(
filename = "output/ak_rivers.png",
width = 9, height = 6, dpi = 600,
bg = "transparent", device = "png", p
)
