kappa_fw[i,] = kappa_fw[i,] * -1
}
N_j[i,] = N_eggs[i,]*kappa_fw[i,]
kappa_sp[i,] <- (true_p_2)/(1 + ((true_p_2*N_j[i,])/true_c_2))  + obs_error[[i]]
if(  kappa_sp[i,] < 0){
kappa_sp[i,] = kappa_sp[i,] * -1
}
N_sp[i,] = N_j[i,]*kappa_sp[i,]
}
# N_eggs[2:8]
# kappa_fw[2:8]
# kappa_sp[2:8]
# N_j[2:8]
# N_sp[2:8]
survival <- c(kappa_fw,kappa_sp,N_j,N_sp)
# Create a data frame for the simulated data
simulated_data <- data.frame(stage = c(rep("kappa_j",times = num_points),
rep("kappa_sp", times = num_points),
rep("N_j", times = num_points),
rep("N_sp", times = num_points)),
time = c(rep(1:100, times = 4)),
kappa_stage = survival)  %>%
spread(stage, kappa_stage)
#
#
plota <- ggplot(data = simulated_data, aes(x=time, y = kappa_j)) +
geom_point()
plotb <- ggplot(data = simulated_data, aes(x=time, y = kappa_sp)) +
geom_point()
plotc <- ggplot(data = simulated_data, aes(x=time, y = N_j)) +
geom_point()
plotd <- ggplot(data = simulated_data, aes(x=time, y = N_sp)) +
geom_point()
plot <- ggarrange(plota,plotb,plotc,plotd)
# num_time_steps <- 100    # Number of time steps
# r <- rnorm(mean=0.03, sd=0.5, n=num_time_steps)  # Intrinsic growth rate
#
# # Create an empty vector to store the population data
# population <- numeric(num_time_steps)
#
# # Initialize the first time step with the initial population size
# population[1] <- initial_population
#
# # Simulate the population dynamics using growth model
# for (t in 2:num_time_steps) {
#   population[t] <- population[t - 1] * exp(r[t])
# save covariate, right now same for each river so just saving one... this will change
# saveRDS(covar_mat_1, "output/covar_temp_sim.RDS")
return(list(plot,simulated_data))
}
sim_yukon_spring <- sim_data(min_ssb = min(yukon_spring$Escapement),#10 ,
max_ssb = max(yukon_spring$Escapement),#1000,
true_p_1 = 0.05, # egg to juvenile just taking this from mousalli and hilborn paper
true_p_2 = 0.15, # juvenile to adult
true_c_1 = 1000000,
true_c_2 = 1000000000,
true_sigma_y = .01)
# set up fxn  ========================================================
sim_data<-function(min_ssb,max_ssb,true_p_1,true_p_2,
true_c_1,true_c_2,
true_sigma_y){
# theta_1 <- -0.5
#
# # Set the parameters for the ARMA process
# phi <- 0.3  # Autoregressive coefficient (controls autocorrelation)
# sigma <- 1  # Standard deviation of the white noise (controls variability)
#
# # Simulate the AR(1) time series with mean 0
# # right now no matrix just do one covariate...
# covar_mat_1 <- arima.sim(model = list(ar = c(phi), order = c(1, 0, 0)), n = num_points, sd = sigma)
# Plot the simulated time series
# plot(temperature, type = "l", col = "blue", xlab = "Time", ylab = "Temperature")
# Population across multiple stages
#N_fw <- runif(num_points, min_ssb, max_ssb/2)
# add a starting value
N_sp = matrix(nrow=num_points, ncol=1, NA)
N_sp[1,] <- min_ssb
obs_error  <- rnorm( num_points, 0, true_sigma_y)
N_eggs = matrix(nrow=num_points,ncol=1,NA)
kappa_fw =  matrix(nrow=num_points,ncol=1,NA)
N_j =  matrix(nrow=num_points,ncol=1,NA)
kappa_sp =  matrix(nrow=num_points,ncol=1,NA)
for (i in 2:num_points) {
N_eggs[i,] = fs*Ps*N_sp[i-1,]
kappa_fw[i,] <- (true_p_1)/(1 + ((true_p_1*N_eggs[i,])/true_c_1)) + obs_error[[i]]
if(  kappa_fw[i,] < 0){
kappa_fw[i,] = kappa_fw[i,] * -1
}
N_j[i,] = N_eggs[i,]*kappa_fw[i,]
kappa_sp[i,] <- (true_p_2)/(1 + ((true_p_2*N_j[i,])/true_c_2))  + obs_error[[i]]
if(  kappa_sp[i,] < 0){
kappa_sp[i,] = kappa_sp[i,] * -1
}
N_sp[i,] = N_j[i,]*kappa_sp[i,]
}
# N_eggs[2:8]
# kappa_fw[2:8]
# kappa_sp[2:8]
# N_j[2:8]
# N_sp[2:8]
survival <- c(kappa_fw,kappa_sp,N_j,N_sp)
# Create a data frame for the simulated data
simulated_data <- data.frame(stage = c(rep("kappa_j",times = num_points),
rep("kappa_sp", times = num_points),
rep("N_j", times = num_points),
rep("N_sp", times = num_points)),
time = c(rep(1:num_points, times = 4)),
kappa_stage = survival)  %>%
spread(stage, kappa_stage)
#
#
plota <- ggplot(data = simulated_data, aes(x=time, y = kappa_j)) +
geom_point()
plotb <- ggplot(data = simulated_data, aes(x=time, y = kappa_sp)) +
geom_point()
plotc <- ggplot(data = simulated_data, aes(x=time, y = N_j)) +
geom_point()
plotd <- ggplot(data = simulated_data, aes(x=time, y = N_sp)) +
geom_point()
plot <- ggarrange(plota,plotb,plotc,plotd)
# num_time_steps <- 100    # Number of time steps
# r <- rnorm(mean=0.03, sd=0.5, n=num_time_steps)  # Intrinsic growth rate
#
# # Create an empty vector to store the population data
# population <- numeric(num_time_steps)
#
# # Initialize the first time step with the initial population size
# population[1] <- initial_population
#
# # Simulate the population dynamics using growth model
# for (t in 2:num_time_steps) {
#   population[t] <- population[t - 1] * exp(r[t])
# save covariate, right now same for each river so just saving one... this will change
# saveRDS(covar_mat_1, "output/covar_temp_sim.RDS")
return(list(plot,simulated_data))
}
sim_yukon_spring <- sim_data(min_ssb = min(yukon_spring$Escapement),#10 ,
max_ssb = max(yukon_spring$Escapement),#1000,
true_p_1 = 0.05, # egg to juvenile just taking this from mousalli and hilborn paper
true_p_2 = 0.15, # juvenile to adult
true_c_1 = 1000000,
true_c_2 = 1000000000,
true_sigma_y = .01)
sim_yukon_fall <- sim_data(min_ssb = min(yukon_fall$Estimated_Run),
max_ssb = max(yukon_fall$Estimated_Run),
true_p_1 = 0.03,
true_p_2 = 0.18,
true_c_1 = 1000000,
true_c_2 = 1000000000,
true_sigma_y = 0.01)
sim_yukon_spring[[1]]
sim_yukon_fall <- sim_data(min_ssb = min(yukon_fall$Estimated_Run),
max_ssb = max(yukon_fall$Estimated_Run),
true_p_1 = 0.03,
true_p_2 = 0.18,
true_c_1 = 1000000,
true_c_2 = 1000000000,
true_sigma_y = 0.01)
sim_yukon_fall[[1]]
sim_kusko <- sim_data(min_ssb = min(kusko$pred_N_est),#10 ,
max_ssb = max(kusko$pred_N_est),#1000,
true_p_1 = 0.08,
true_p_2 = 0.14,
true_c_1 = 1000000,
true_c_2 = 1000000000,
true_sigma_y = 0.01)
sim_kusko[[1]]
sim_yukon_spring[[2]][2:101]
sim_yukon_spring[[2]][2:101,]
write_csv(sim_yukon_spring[[2]][2:101,], "data/Simulated_Yukon_Spring.csv")
write_csv(sim_yukon_spring[[2]][2:101,], "data/Simulated_Yukon_Spring.csv")
write_csv(sim_yukon_fall[[2]][2:101,], "data/Simulated_Yukon_Fall.csv")
write_csv(sim_kusko[[2]][2:101,], "data/Simulated_Kusko.csv")
# load simulated data =======================================================
# to start, use simulated data from "scripts/simulate_data.R"
sim_yukon_spring_df <- read_csv("data/Simulated_Yukon_Spring.csv")
sim_yukon_fall_df <- read_csv("data/Simulated_Yukon_Fall.csv")
sim_kusko_df <- read_csv("data/Simulated_Kusko.csv")
View(sim_yukon_fall_df)
# load Covariates  ==========================================================
#covar_temp <- data.frame(temp = c(readRDS("output/covar_temp_sim.RDS")))
#covar_1 <- rep(covar_temp$temp, times = 3)
# setup inputs ==============================================================
warmups <- 1000
total_iterations <- 4000
max_treedepth <-  15
n_chains <-  4
n_cores <- 4
adapt_delta <- 0.95
# Organize data call inputs ================================================
K = 3 # number of stocks involved
N = sum(N_stock)
K = 3 # number of stocks involved
N_stock <- c(nrow(sim_yukon_spring_df), nrow(sim_yukon_fall_df), nrow(sim_kusko_df))
N = sum(N_stock)
N_stock[1]
g = c(rep(1, times = N_stock[1]),  # Vector of group assignments.
rep(2, times = N_stock[2]),
rep(3, times = N_stock[3]))
stage_j <- c(as.integer(sim_yukon_spring_df$N_j),
as.integer(sim_yukon_fall_df$N_j),
as.integer(sim_kusko_df$N_j))
stage_sp <- c(as.integer(sim_yukon_spring_df$N_sp),
as.integer(sim_yukon_fall_df$N_sp),
as.integer(sim_kusko_df$N_sp))
library(rstan)
library(tidyverse)
library(here)
# load simulated data =======================================================
# to start, use simulated data from "scripts/simulate_data.R"
sim_yukon_spring_df <- read_csv("data/Simulated_Yukon_Spring.csv")
sim_yukon_fall_df <- read_csv("data/Simulated_Yukon_Fall.csv")
sim_kusko_df <- read_csv("data/Simulated_Kusko.csv")
# load Covariates  ==========================================================
#covar_temp <- data.frame(temp = c(readRDS("output/covar_temp_sim.RDS")))
#covar_1 <- rep(covar_temp$temp, times = 3)
# setup inputs ==============================================================
warmups <- 1000
total_iterations <- 4000
max_treedepth <-  15
n_chains <-  4
n_cores <- 4
adapt_delta <- 0.95
Ps <- 0.5 # proportion of females - assumption, need to lit check
fs <- 500 # fecundity - random assumption that worked in simulation, need to lit check
# Organize data call inputs ================================================
K = 3 # number of stocks involved
N_stock <- c(nrow(sim_yukon_spring_df), nrow(sim_yukon_fall_df), nrow(sim_kusko_df))
N = sum(N_stock)
g = c(rep(1, times = N_stock[1]),  # Vector of group assignments.
rep(2, times = N_stock[2]),
rep(3, times = N_stock[3]))
#ncovars = 1 # right now just trying with temperature for stage 1
stage_j <- c(as.integer(sim_yukon_spring_df$N_j),
as.integer(sim_yukon_fall_df$N_j),
as.integer(sim_kusko_df$N_j))
stage_sp <- c(as.integer(sim_yukon_spring_df$N_sp),
as.integer(sim_yukon_fall_df$N_sp),
as.integer(sim_kusko_df$N_sp))
data_list <- list(N = N,
K = K,
g = g,
N_stock = N_stock,
stage_j = stage_j,
stage_sp = stage_sp)
# ncovars = ncovars,
# covar_1 = covar_1)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
# init = list(
#   #  alpha = 0.02, beta = 7*10^-6)
#   list(
#     log_alpha = log(0.02),
#     log_beta = log(7*10^-6)
#   ),
#   list(
#     log_alpha = log(0.025),
#     log_beta = log(7.3*10^-6)
#   ),
#   list(
#     log_alpha = log(0.04),
#     log_beta = log(7.1*10^-6)
#   ),
#   list(
#     log_alpha = log(0.011),
#     log_beta = log(7.13*10^-6)
#   )
# ),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
# init = list(
#   #  alpha = 0.02, beta = 7*10^-6)
#   list(
#     log_alpha = log(0.02),
#     log_beta = log(7*10^-6)
#   ),
#   list(
#     log_alpha = log(0.025),
#     log_beta = log(7.3*10^-6)
#   ),
#   list(
#     log_alpha = log(0.04),
#     log_beta = log(7.1*10^-6)
#   ),
#   list(
#     log_alpha = log(0.011),
#     log_beta = log(7.13*10^-6)
#   )
# ),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
# init = list(
#   #  alpha = 0.02, beta = 7*10^-6)
#   list(
#     log_alpha = log(0.02),
#     log_beta = log(7*10^-6)
#   ),
#   list(
#     log_alpha = log(0.025),
#     log_beta = log(7.3*10^-6)
#   ),
#   list(
#     log_alpha = log(0.04),
#     log_beta = log(7.1*10^-6)
#   ),
#   list(
#     log_alpha = log(0.011),
#     log_beta = log(7.13*10^-6)
#   )
# ),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
# init = list(
#   #  alpha = 0.02, beta = 7*10^-6)
#   list(
#     log_alpha = log(0.02),
#     log_beta = log(7*10^-6)
#   ),
#   list(
#     log_alpha = log(0.025),
#     log_beta = log(7.3*10^-6)
#   ),
#   list(
#     log_alpha = log(0.04),
#     log_beta = log(7.1*10^-6)
#   ),
#   list(
#     log_alpha = log(0.011),
#     log_beta = log(7.13*10^-6)
#   )
# ),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
data_list <- list(Ps = Ps,
fs=fs,
N = N,
K = K,
g = g,
N_stock = N_stock,
stage_j = stage_j,
stage_sp = stage_sp)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
# init = list(
#   #  alpha = 0.02, beta = 7*10^-6)
#   list(
#     log_alpha = log(0.02),
#     log_beta = log(7*10^-6)
#   ),
#   list(
#     log_alpha = log(0.025),
#     log_beta = log(7.3*10^-6)
#   ),
#   list(
#     log_alpha = log(0.04),
#     log_beta = log(7.1*10^-6)
#   ),
#   list(
#     log_alpha = log(0.011),
#     log_beta = log(7.13*10^-6)
#   )
# ),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
data_list <- list(Ps = Ps,
fs=fs,
N = N,
K = K,
g = g,
N_stock = N_stock,
stage_j = stage_j,
stage_sp = stage_sp)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
# init = list(
#   #  alpha = 0.02, beta = 7*10^-6)
#   list(
#     log_alpha = log(0.02),
#     log_beta = log(7*10^-6)
#   ),
#   list(
#     log_alpha = log(0.025),
#     log_beta = log(7.3*10^-6)
#   ),
#   list(
#     log_alpha = log(0.04),
#     log_beta = log(7.1*10^-6)
#   ),
#   list(
#     log_alpha = log(0.011),
#     log_beta = log(7.13*10^-6)
#   )
# ),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
Ps
data_list <- list(Ps = Ps,
fs=fs,
N = N,
K = K,
g = g,
N_stock = N_stock,
stage_j = stage_j,
stage_sp = stage_sp)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
# init = list(
#   #  alpha = 0.02, beta = 7*10^-6)
#   list(
#     log_alpha = log(0.02),
#     log_beta = log(7*10^-6)
#   ),
#   list(
#     log_alpha = log(0.025),
#     log_beta = log(7.3*10^-6)
#   ),
#   list(
#     log_alpha = log(0.04),
#     log_beta = log(7.1*10^-6)
#   ),
#   list(
#     log_alpha = log(0.011),
#     log_beta = log(7.13*10^-6)
#   )
# ),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_V1.stan"),
data = data_list,
chains = n_chains,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
refresh = 250,
# init = list(
#   #  alpha = 0.02, beta = 7*10^-6)
#   list(
#     log_alpha = log(0.02),
#     log_beta = log(7*10^-6)
#   ),
#   list(
#     log_alpha = log(0.025),
#     log_beta = log(7.3*10^-6)
#   ),
#   list(
#     log_alpha = log(0.04),
#     log_beta = log(7.1*10^-6)
#   ),
#   list(
#     log_alpha = log(0.011),
#     log_beta = log(7.13*10^-6)
#   )
# ),
control = list(max_treedepth = max_treedepth,
adapt_delta = adapt_delta)
)
