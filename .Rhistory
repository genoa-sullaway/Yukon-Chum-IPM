# data
data =data,
#values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
control=list(trace=6, maxit=1e6))
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
#values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
control=list(trace=6, maxit=1e6,fnscale=-1))
pars_start
# proportions in each area/week/year - Pyj - right now, just fit for 2008
prop<- read_csv("data/Processed_Data/OLD/OLD_Proportions_run_present_weekly.csv") %>% # only select some weeks for now because proportion has less weeks than the effort data...
mutate(year = 1976:(1976+nrow(.)-1)) %>%
filter(year < 2008) %>%
dplyr::select(-year) %>%
dplyr::select(c(2:14)) #getting rid of first and last week because of 0's
# using observed catch/week in catch equation
obs_catch_week <- read_csv("data/Processed_Data/OLD/OLD_catch_week.csv") %>%
filter(year < 2008) %>%
dplyr::select(-year)
years <-unique(escapement$year)  #1976:2021 #length of years in dataset
years <- 1976+nrow(obs_catch_week)-1  #1976:2021 #length of years in dataset
years
years <- c(1976:1976+nrow(obs_catch_week)-1)  #1976:2021 #length of years in dataset
years
#years <- c(1976:1976+nrow(obs_catch_week)-1)  #1976:2021 #length of years in dataset
Nyear <- length(prop)
Nyear
#years <- c(1976:1976+nrow(obs_catch_week)-1)  #1976:2021 #length of years in dataset
Nyear <- nrow(prop)
weeks = ncol(prop)
#years <- c(1976:1976+nrow(obs_catch_week)-1)  #1976:2021 #length of years in dataset
Nyear <- as.numeric(nrow(prop))
weeks = as.numeric(ncol(prop))
# Set up data that are inputs to likelihood fxns =========================================================================================
# Baranov Data Input =========================================================================================
B_yj = as.matrix(effort[,1:13]) # observed effort per week/year
# Effort
effort <- read_csv("data/Processed_Data/OLD/OLD_effort.csv") %>%
filter(year < 2008)
# Set up data that are inputs to likelihood fxns =========================================================================================
# Baranov Data Input =========================================================================================
B_yj = as.matrix(effort[,1:13]) # observed effort per week/year
B_yj
# NLL Function =========================================================================================
NLL <- function(par,
data,
weeks,
projects,
Nyear,
weights){
# Step 1: Extract parameters and data
# grep("ln_q_vec", par_names)
ln_q_vec <- pars_start[1]
#grep("pred_N", par_names)
pred_N <- pars_start[2:33]
B_yj=data$B_yj
obs_catch_week=data$obs_catch_week
# Step 2: Predict C
# Predict C - Catch, using Baranov catch equation: ============================================================================
B_yj_vec <- as.vector(B_yj)
obs_catch_week_vec <- as.vector(as.matrix(obs_catch_week))
N_yi_vec_prop <-as.vector(as.matrix(pred_N*prop))
# Catch equation
# N is # of fish (week by year)
# B is effort (week by year)
# for right now estimate 1 q for whole dataset
pred_catch = N_yi_vec_prop*(1-(exp(-ln_q_vec*B_yj_vec)))
# calculate negative log liklihood
# add a small constant to avoid log 0's
NLL_catch  <- -sum(dnorm(x=log(obs_catch_week_vec+1e-6), mean=log(pred_catch+1e-6),
sd = weights[1],
log = TRUE))
# Return the total objective function value
NLL_catch
}
# Baranov parameters:
ln_q_vec <- 0.002 #0.001 - 0.5 is standard
pred_N <- rep(60000,Nyear)
pars_start<- c(
ln_q_vec,
pred_N)
par_names <- c(
"ln_q_vec",
paste0("pred_N", c(1:Nyear)))#,
w_catch <- 2.0
w_escapement <- 1.0
w_inriver <- 0.5
weights <- c(w_catch,w_escapement,w_inriver)
data <- list(B_yj=B_yj,  obs_catch_week=obs_catch_week )
#check that NLL fxn works... it does
NLL(par=pars_start,
data =data,
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights)
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
#values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
control=list(trace=6, maxit=1e6))
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
#values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0001, 600),
upper = c(0.5, 600000),
control=list(trace=6, maxit=1e6))
# Start ==================================================================================================
# this script is an older version I pulled from Git ot help wiht troubleshooting, from May10 commit.
#Project Name: AYK Chum Salmon Model
#Creator: Genoa Sullaway
#Date: Start March 2023
#
# Purpose: Recreate ADFG Kuskokwim Chum Run reconstruction in R based on excel sheet
# based on Bue and Molyneaux Kuskokwim chum salmon run reconstruction
#
# Load Packages =========================================================================================
library(tidyverse)
library(here)
# Load data =========================================================================================
# Escapement - Weir estimates by project
escapement <- read_csv("data/Processed_Data/OLD/OLD_kusko_escapement.csv") %>%
filter(year < 2008)
catch<-read_csv("data/Processed_Data/OLD/OLD_catch.csv") %>%
filter(Year < 2008)
# Effort
effort <- read_csv("data/Processed_Data/OLD/OLD_effort.csv") %>%
filter(year < 2008)
# proportions in each area/week/year - Pyj - right now, just fit for 2011
prop<- read_csv("data/Processed_Data/OLD/OLD_Proportions_run_present_weekly.csv") %>% # only select some weeks for now because proportion has less weeks than the effort data...
mutate(year = 1976:(1976+nrow(.)-1)) %>%
filter(year < 2008) %>%
dplyr::select(-year) %>%
dplyr::select(c(2:14)) #getting rid of first and last week because of 0's
# using observed catch/week in catch equation
obs_catch_week <- read_csv("data/Processed_Data/OLD/OLD_catch_week.csv") %>%
dplyr::select(-year)
years <-unique(escapement$year)  #1976:2021 #length of years in dataset
Nyear <- length(years)
projects = 7 # number of weir projects
T =  Nyear*4 # "Total number of observations from all data sets" page 6 - I am not sure if 36 is right??
weeks = ncol(prop)
# Set up data that are inputs to likelihood fxns =========================================================================================
obs_escape_project <- as.matrix(escapement[,2:8])
obs_escape <- as.matrix(rowSums(escapement[,2:8]))
obs_catch <- as.matrix(rowSums(catch[,2:3]))
obs_commercial <- as.matrix(catch[,2])
obs_subsistence <- as.matrix(catch[,3])
obs_N = as.matrix(obs_escape + obs_subsistence + obs_catch) # on Page 5 of model paper this is N_y, in excel this is "# of fish accounted for"
colnames(obs_N)<- NULL
obs_N
mean(obs_N)
1e6
# Baranov parameters:
ln_q_vec <- 0.002 #0.001 - 0.5 is standard
pred_N <- rep(941643,Nyear)
pars_start<- c(
ln_q_vec,
pred_N)
par_names <- c(
"ln_q_vec",
paste0("pred_N", c(1:Nyear)))#,
w_catch <- 2.0
w_escapement <- 1.0
w_inriver <- 0.5
weights <- c(w_catch,w_escapement,w_inriver)
data <- list(B_yj=B_yj,  obs_catch_week=obs_catch_week )
#check that NLL fxn works... it does
NLL(par=pars_start,
data =data,
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights)
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0001, 6000),
upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6))
# Access the estimated parameter values
param_est <- optim_output$par
param_est
# Baranov parameters:
ln_q_vec <- 0.002 #0.001 - 0.5 is standard
pred_N <- rep(941643,Nyear)
pred_N
pars_start<- c(
ln_q_vec,
pred_N)
par_names <- c(
"ln_q_vec",
paste0("pred_N", c(1:Nyear)))#,
par_names
pars_start
#check that NLL fxn works... it does
NLL(par=pars_start,
data =data,
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights)
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0001, 6000),
upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6))
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0001, 6000),
upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6, pgtol =10e-8 ))
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0001, 6000),
upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6, pgtol =10e-1 ))
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0001, 6000),
upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6, factr = 1e-10 ))
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0001, 6000),
upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6, factr = 0 ))
# for model optim run
par=pars_start # starting values for parameter estimations
#NLL is function that you create above
# data/fixed values go below
N_yi=N_yi
B_yj=B_yj
obs_N=obs_N
obs_escape_project=obs_escape_project
obs_catch_week=obs_catch_week
#values
weeks=weeks
projects=projects
Nyear=Nyear
weights = weights
# Step 1: Extract parameters and data
# grep("ln_q_vec", par_names)
ln_q_vec <- pars_start[1]
#grep("pred_N", par_names)
pred_N <- pars_start[2:33]
B_yj=data$B_yj
obs_catch_week=data$obs_catch_week
B_yj_vec <- as.vector(B_yj)
obs_catch_week_vec <- as.vector(as.matrix(obs_catch_week))
N_yi_vec_prop <-as.vector(as.matrix(pred_N*prop))
# Catch equation
# N is # of fish (week by year)
# B is effort (week by year)
# for right now estimate 1 q for whole dataset
pred_catch = N_yi_vec_prop*(1-(exp(-ln_q_vec*B_yj_vec)))
# calculate negative log liklihood
# add a small constant to avoid log 0's
NLL_catch  <- -sum(dnorm(x=log(obs_catch_week_vec+1e-6), mean=log(pred_catch+1e-6),
sd = weights[1],
log = TRUE))
pred_catch
-sum(dnorm(x=log(obs_catch_week_vec+1e-6), mean=log(pred_catch+1e-6),
sd = weights[1],
log = TRUE))
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.00001, 6000),
upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6, factr = 0 ))
# Access the estimated parameter values
param_est <- optim_output$par
param_est
exp(0.0000441437278692359)
# Baranov parameters:
ln_q_vec <- 0.00002 #0.001 - 0.5 is standard
pred_N <- rep(941643,Nyear)
pars_start<- c(
ln_q_vec,
pred_N)
par_names <- c(
"ln_q_vec",
paste0("pred_N", c(1:Nyear)))#,
w_catch <- 2.0
w_escapement <- 1.0
w_inriver <- 0.5
weights <- c(w_catch,w_escapement,w_inriver)
data <- list(B_yj=B_yj,  obs_catch_week=obs_catch_week )
#check that NLL fxn works... it does
NLL(par=pars_start,
data =data,
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights)
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0000004, 6000),
upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6, factr = 0 ))
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
# lower = c(0.0000004, 6000),
# upper = c(0.5, 1e7),
control=list(trace=6, maxit=1e6, factr = 0 ))
# Baranov parameters:
ln_q_vec <- 0.0002 #0.001 - 0.5 is standard
pred_N <- rep(941643,Nyear)
pars_start<- c(
ln_q_vec,
pred_N)
par_names <- c(
"ln_q_vec",
paste0("pred_N", c(1:Nyear)))#,
w_catch <- 2.0
w_escapement <- 1.0
w_inriver <- 0.5
weights <- c(w_catch,w_escapement,w_inriver)
data <- list(B_yj=B_yj,  obs_catch_week=obs_catch_week )
#check that NLL fxn works... it does
NLL(par=pars_start,
data =data,
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights)
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0000004, 60000),
upper = c(0.5, 1e9),
control=list(trace=6, maxit=1e6, factr = 0 ))
# NLL Function =========================================================================================
NLL <- function(par,
data,
weeks,
projects,
Nyear,
weights){
# Step 1: Extract parameters and data
# grep("ln_q_vec", par_names)
ln_q_vec <- pars_start[1]
#grep("pred_N", par_names)
pred_N <- pars_start[2:33]
B_yj=data$B_yj
obs_catch_week=data$obs_catch_week
# Step 2: Predict C
# Predict C - Catch, using Baranov catch equation: ============================================================================
B_yj_vec <- as.vector(B_yj)
obs_catch_week_vec <- as.vector(as.matrix(obs_catch_week))
N_yi_vec_prop <-as.vector(as.matrix(pred_N*prop))
# Catch equation
# N is # of fish (week by year)
# B is effort (week by year)
# for right now estimate 1 q for whole dataset
pred_catch = N_yi_vec_prop*(1-(exp(-ln_q_vec*B_yj_vec)))
# calculate negative log liklihood
# add a small constant to avoid log 0's
NLL_catch  <- -sum(dnorm(x=log(obs_catch_week_vec+1e-6), mean=log(pred_catch+1e-6),
sd = weights[1],
log = TRUE))
# Return the total objective function value
NLL_catch^2
}
# Baranov parameters:
ln_q_vec <- 0.0002 #0.001 - 0.5 is standard
pred_N <- rep(941643,Nyear)
pars_start<- c(
ln_q_vec,
pred_N)
par_names <- c(
"ln_q_vec",
paste0("pred_N", c(1:Nyear)))#,
w_catch <- 2.0
w_escapement <- 1.0
w_inriver <- 0.5
weights <- c(w_catch,w_escapement,w_inriver)
data <- list(B_yj=B_yj,  obs_catch_week=obs_catch_week )
#check that NLL fxn works... it does
NLL(par=pars_start,
data =data,
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights)
# Run Optim ============================================================================================================
optim_output  <- stats::optim(par=pars_start, # starting values for parameter estimations
fn=NLL, #NLL is function that you create above
# data
data =data,
# values
weeks=weeks,
projects=projects,
Nyear=Nyear,
weights = weights,
method="L-BFGS-B",
lower = c(0.0000004, 60000),
upper = c(0.5, 1e9),
control=list(trace=6, maxit=1e6, factr = 0 ))
