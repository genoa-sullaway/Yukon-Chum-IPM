# the temp in 2001 is gonna effect fish from brood year 1999
stage_b_cov <- read_csv("data/processed_covariates/stage_b_all.csv") %>%
dplyr::rename(full_index=full_index_scale) %>%
filter(brood_year >= year_min,
brood_year <= year_max_brood) #%>%
# dplyr::mutate( SST_CDD_Aleut = as.numeric(scale(SST_CDD_Aleut)),
#                Chum_hatchery= as.numeric(scale(Chum_hatchery)),
#                Pink_hatchery= as.numeric(scale(Pink_hatchery))
#                # full_index = as.numeric(scale(full_index))
# )
# get 1 SD for each covariate ====
cov_a_sd <- stage_a_cov %>% #cbind(stage_a_cov, stage_b_cov) %>%
gather(1:ncol(.), key = "id", value = "value") %>%
group_by(id) %>%
dplyr::summarise(sd = round(sd(value),6))
cov_b_sd <- stage_b_cov %>% #cbind(stage_a_cov, stage_b_cov) %>%
gather(1:ncol(.), key = "id", value = "value") %>%
group_by(id) %>%
dplyr::summarise(sd = round(sd(value),6))
# OLD ===============
## Juvenile stage analyses specific years =========
covariates <- c("Spawner Size")
coef_names <- c("theta1[1]")
#specific interest in spawner size in BY 2015
for (i in 1:length(covariates)) {
low_result <- calc_percent_change(
base.prod = juv_pars$basal_p_1,
coef = juv_pars[[coef_names[i]]],
capacity = juv_pars$c_1,
N = pred_N_j,
year = 2019,
coef_input = stage_a_cov %>%
dplyr::select(brood_year,mean_size) %>%
filter(brood_year == 2019) %>%
dplyr::rename(coeff_value = mean_size)
)
specific_results <- rbind(specific_results, data.frame(
stage = "Juvenile",
covariate = covariates[i],
abundance = "Mean",
survival_covar0 = low_result$surv_0,
survival_covar1 = low_result$surv_1,
percent_change = low_result$percent_change
))
}
## Return stage analyses ===========
covariates <- c("AI Temp")
coef_names <- c("theta2[2]")
for (i in 1:length(covariates)) {
# Mean abundance
low_result <- calc_percent_change(
base.prod = return_pars$basal_p_2,
coef = return_pars[[coef_names[i]]],
capacity = return_pars$c_2,
N = pred_N_return,
year = 2019,
coef_input = stage_b_cov %>%
dplyr::select(brood_year,SST_CDD_Aleut) %>%
filter(brood_year == 2019) %>%
dplyr::rename(coeff_value = SST_CDD_Aleut)
)
specific_results <- rbind(specific_results, data.frame(
stage = "Return",
covariate = covariates[i],
abundance = "Mean",
survival_covar0 = low_result$surv_0,
survival_covar1 = low_result$surv_1,
percent_change = low_result$percent_change
))
}
# summarise Mean and CI for each covariate among posterior draws.
specific_ci_df <- calculate_credible_intervals(results_df = specific_results)
# Return the consolidated results data frame
# Format the percent_change for better readability
specific_ci_df$mean_percent_change <- round(specific_ci_df$mean_percent_change, 2)
# Optional: Save results to CSV
write.csv(specific_ci_df, "output/survival_percent_diff_specific_years.csv" )
library(tidyverse)
library(tidybayes)
library(here)
library(bayesplot)
library(bayestestR)
# Plot percent change in survival ============
source("scripts/Calculate_Percent_Survival.R")
ci_df <- read_csv("output/survival_percent_diff.csv") %>%
dplyr::mutate(covariate = case_when(covariate == "SST CDD" ~ "NBS SST",
covariate == "AI Temp" ~ "AI SST",
covariate == "Fullness" ~ "Fullness Index",
covariate == "Pollock" ~ "Pollock Recruitment",
covariate == "Chum" ~ "Hatchery Chum",
TRUE ~ covariate),
covariate = factor(covariate, levels = rev(c("Spawner Size",
"Snow Pack",
"NBS SST",
"Pollock Recruitment",
"Fullness Index",
"AI SST",
"Hatchery Chum"))))
theta_plot <- ggplot(data = ci_df,
aes(x= mean_percent_change, y = covariate,
group = stage, color = stage)) +
geom_errorbar(aes(xmin =lower_95, xmax = upper_95),
width = 0, linewidth = 0.5 ) +
geom_point(size = 2) +
geom_errorbar(aes(xmin =lower_50, xmax = upper_50), linewidth = 1.5, width = 0) +
theme_classic() +
scale_color_manual(values =c("#EAAA00", "#2d9d92")) +
theme(panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
legend.title = element_blank(),
strip.text = element_blank( ),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
strip.text.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1 ),
panel.spacing.y=unit(0, "lines")) +
geom_vline(xintercept=0 )+
ylab("") +
xlab("Estimated Percent Change in Survival") +
facet_wrap(~stage, scales = "free_y", ncol = 1)
theta_plot
theta_plot
ggsave("output/Plot_Manuscript_Covariates.png", width = 7, height = 4 )
library(tidyverse)
library(tidybayes)
library(here)
library(readxl)
library(bayesplot)
library(bayestestR)
# load model ==============
bh_fit <- read_rds("output/stan_fit_DATA.RDS")
# get this from the model call script: year_min = 2001
years <-read_csv("data/processed_data/yukon_fall_spawners.csv") %>%
filter(cal_year >= year_min) %>%
dplyr::select(cal_year) %>%
# dplyr::mutate(brood_year = cal_year) %>%
dplyr::mutate(time = c(1:nrow(.)))
# return  ======
adult_cvs <- read_xlsx("data/chum_cv.xlsx") %>%
dplyr::mutate(brood_year = year-3) %>%
dplyr::select(brood_year,fall_spawner_cv)
pred_return <-  as.data.frame(bh_fit, pars = c("N_brood_year_return")) %>%
mutate(draw = 1:nrow(.)) %>%
gather(1:(ncol(.)-1), key = "rowname", value = "value") %>%
data.frame() %>%
group_by(rowname) %>%
summarise(mean = mean(value),
ci_80_low = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_low),
ci_80_high = as.numeric(ci(value, method = "HDI", ci = 0.80)$CI_high),
ci_95_low = as.numeric(ci(value, method = "HDI", ci = 0.99)$CI_low),
ci_95_high = as.numeric(ci(value, method = "HDI", ci = 0.99)$CI_high)) %>%
separate(rowname, into = c("del1","year", "del2"), sep = c(-3,-1)) %>%
arrange(row_number(.)) %>%
dplyr::mutate(brood_year = c(2002:2021)) %>%
left_join(data.frame(time = c(1:17),
brood_year = c(2002:2018),
obs = c(yukon_fall_return_brood_year$Brood_Year_Return))) %>% # data_list_stan$data_stage_return[1:nrow(.)])) %>%
left_join(adult_cvs) %>%
dplyr::select(brood_year,obs, fall_spawner_cv,
mean,ci_95_low,ci_95_high) %>%
dplyr::mutate(sd_obs =   (fall_spawner_cv*obs)) %>%
filter(!brood_year > 2018)
return_plot <- ggplot(data = pred_return) +
geom_ribbon(aes(x=brood_year, ymin =ci_95_low/1000000,
ymax = ci_95_high/1000000),   fill =  "#2d9d92") +
geom_line(aes(x=brood_year, y = mean/1000000)#, color = "white"
) +
geom_errorbar(aes(x=brood_year, ymin = (obs-sd_obs)/1000000,
ymax = (obs+sd_obs)/1000000), width = 0.1) +
geom_point(aes(x=brood_year, y = obs/1000000) ) +
theme_classic() +
xlab("Brood Year") +
ylab("Est. Return Abundance\n(Millions)") +
scale_y_continuous(limits = c(0, 2500000/1000000)) +
theme(panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
axis.title.y = element_text(size = 10),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
)
return_plot
# ggsave("output/return_est_plot.png", width = 7, height = 4, bg = "transparent")
# plot with different confidence intervals=====
# Juveniles PP ======
# multiply by catch q to fit observations
juv_obs <-read_csv("data/processed_data/tidy_juv_fall_yukon.csv") %>%
dplyr::mutate(#brood_year = Year - 1,
time = as.numeric(1:nrow(.)),
obs = (fall_abund),
sd = Std..Error.for.Estimate ) %>% #(CV*obs)) %>%
# filter(!Year %in% c(2020, 2008,2013)) %>%
dplyr::select(Year,obs,sd)
# rbind(data.frame(brood_year = c(2008, 2013,2020),
#                  obs = c(NA,NA,NA),
#                  sd = c(NA,NA,NA)))
# plot juvenile observations ======
juv_all_plot <- ggplot(data = juv_obs, aes(x=Year, y = obs)) +
geom_point(color ="#EAAA00") +
geom_line(color ="#EAAA00") +
geom_errorbar(aes(x=Year, ymin = obs-sd,
ymax= obs+sd),
width = 0.1, color = "#EAAA00") +
theme_classic() +
ylab("Abundance Estimate") +
xlab("Calendar Year") +
theme(panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
legend.text = element_text(color = "white"),
legend.title = element_blank(),
strip.text = element_blank( ),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,color = "white"),
axis.text.y = element_text(color = "white"),
axis.title.y = element_text(color = "white"),
axis.title.x = element_text(color = "white"),
axis.ticks.y = element_line(color = "white"),
axis.ticks.x = element_line(color = "white"),
panel.spacing.y=unit(0, "lines"))
juv_all_plot
ggsave("output/juvenile_observations_fallchum_plot.png", width = 5, height = 3)
# catch_q <- summary(bh_fit, pars = c("log_catch_q"),
#                    probs = c(0.1, 0.9))$summary %>%
#   data.frame() %>%
#   rownames_to_column()  %>%
#   mutate(mean = exp(mean))
catch_q <- as.data.frame(bh_fit, pars = c("log_catch_q")) %>%
dplyr::mutate(catch_q = exp(log_catch_q)) %>%
dplyr::select(-log_catch_q)
pred_N_j_adjusted <- as.data.frame(bh_fit, pars = c("N_j")) %>%
dplyr::mutate(draw = 1:nrow(.)) %>%
cbind(catch_q) %>%
dplyr::mutate(across(starts_with("N_j"), ~ .x * catch_q))
# Process each column individually and create a clean dataframe
n_j_cols <- grep("^N_j\\[", names(pred_N_j_adjusted), value = TRUE)
n_j_summary_clean <- map_dfr(n_j_cols, function(col) {
values <- pred_N_j_adjusted[[col]]
tibble(
parameter = col,
mean = mean(values, na.rm = TRUE),
median = median(values, na.rm = TRUE),
ci_80_low = as.numeric(ci(values, ci = 0.8, method = "HDI")$CI_low),
ci_80_high = as.numeric(ci(values, ci = 0.8, method = "HDI")$CI_high),
ci_95_low = as.numeric(ci(values, ci = 0.95, method = "HDI")$CI_low),
ci_95_high = as.numeric(ci(values, ci = 0.95, method = "HDI")$CI_high)
)
}) %>%
cbind(Year=years$cal_year[1:20]) %>%
left_join(juv_obs)
juv_plot <- ggplot(data = n_j_summary_clean) +
geom_ribbon(aes(x=Year, ymin =ci_95_low/1000000,
ymax = ci_95_high/1000000),   fill =  "#EAAA00") +
geom_line(aes(x=Year, y = mean/1000000)) +
geom_errorbar(aes(x=Year, ymin = (obs-sd)/1000000,
ymax = (obs+sd)/1000000), width = 0.1, alpha = 0.6) +
geom_point(aes(x=Year, y = (obs)/1000000), alpha = 0.6) +
# geom_line(aes(x=brood_year, y = (obs)), color = "white" ) +
# scale_x_continuous(breaks = c(2002, 2005,2010, 2015,2020)) +
theme_classic() +
xlab("Calendar Year") +
ylab("Est. Juv. Abundance\n (Millions)") +
theme(panel.background = element_blank(), #element_rect(fill = "black", colour = NA),
plot.background = element_blank(), #element_rect(fill = "black", colour = NA),
legend.background = element_blank(),
# legend.text = element_text(color = "white"),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background = element_blank(),
# panel.border = element_rect(colour = "white", fill = NA),
strip.text.x = element_blank(),
# axis.line = element_line(color = "white"),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),#,color = "white"),
# axis.text.y = element_text(color = "white"),
axis.title.y = element_text(size = 10)
# axis.title.x = element_text(color = "white"),
# axis.ticks.y = element_line(color = "white"),
# axis.ticks.x = element_line(color = "white")
)
juv_plot
## save ========
obs_plot <- ggpubr::ggarrange(juv_plot,return_plot, nrow = 2, labels = c("A.", "B."))
obs_plot
View(ci_df)
# make table for supplement that has complete model output:
# parameters, parameter descriotion, Rhat, Neff, symbol,mean estiamte with CIs
# Load required libraries
library(tidyverse)
library(knitr)
library(kableExtra)
library(rstan)
fit<- read_rds("output/stan_fit_DATA.RDS")
# Function to create summary statistics from posterior samples
create_parameter_summary <- function(fit, parameter_name, notation, prior) {
# Extract posterior summary
posterior_summary <- summary(fit)$summary
# Get statistics for the parameter
param_stats <- posterior_summary[parameter_name, ]
data.frame(
Parameter = parameter_name,
Notation = notation,
Estimate = sprintf("%.2f", param_stats["mean"]),
CI_95 = sprintf("[%.2f, %.2f]",
param_stats["2.5%"],
param_stats["97.5%"]),
ESS = sprintf("%.0f", param_stats["n_eff"]),  # Effective Sample Size
Rhat = sprintf("%.3f", param_stats["Rhat"]),  # R-hat convergence diagnostic
Prior = prior,
stringsAsFactors = FALSE
)
}
# Call Function ==============
# each param will need to be manual
summary_df <- rbind(
### basal survival 1 =======
create_parameter_summary(
fit = fit,
parameter_name = "basal_p_1",
notation = "$\\sigma_o$",
prior = "Beta(1,1)"
),
### basal survival 2 =======
create_parameter_summary(
fit = fit,
parameter_name = "basal_p_2",
notation = "$\\sigma_o$",
prior = "Beta(1,1)"
),
### theta 1 =======
create_parameter_summary(
fit = fit,
parameter_name = "theta1[1]",
notation = "$\\sigma_o$",
prior = "Beta(0,0.1)"
),
create_parameter_summary(
fit = fit,
parameter_name = "theta1[2]",
notation = "$\\sigma_o$",
prior = "Beta(0,0.1)"
),
create_parameter_summary(
fit = fit,
parameter_name = "theta1[3]",
notation = "$\\sigma_o$",
prior = "Beta(0,0.1)"
),
create_parameter_summary(
fit = fit,
parameter_name = "theta1[4]",
notation = "$\\sigma_o$",
prior = "Beta(0,0.1)"
),
### theta 2 =======
create_parameter_summary(
fit = fit,
parameter_name = "theta2[1]",
notation = "$\\sigma_o$",
prior = "Beta(0,0.1)"
),
create_parameter_summary(
fit = fit,
parameter_name = "theta2[2]",
notation = "$\\sigma_o$",
prior = "Beta(0,0.1)"
),
create_parameter_summary(
fit = fit,
parameter_name = "theta2[3]",
notation = "$\\sigma_o$",
prior = "Beta(0,0.1)"
),
# alpha ======
create_parameter_summary(
fit = fit,
parameter_name = "alpha[1]",
notation = "$\\sigma_o$",
prior = "Normal(7.5,0.5)"),
create_parameter_summary(
fit = fit,
parameter_name = "alpha[2]",
notation = "$\\sigma_o$",
prior = "Normal(7.5,0.5)"),
create_parameter_summary(
fit = fit,
parameter_name = "alpha[3]",
notation = "$\\sigma_o$",
prior = "Normal(7.5,0.5)"),
create_parameter_summary(
fit = fit,
parameter_name = "alpha[4]",
notation = "$\\sigma_o$",
prior = "Normal(7.5,0.5)"),
# Mean F =====
create_parameter_summary(
fit = fit,
parameter_name = "log_F_mean",
notation = "$K$",
prior = "Normal(0,1)"
),
# F SD ======
create_parameter_summary(
fit = fit,
parameter_name = "log_F_dev_y[1]",
notation = "$K$",
prior = "Normal(0,1)"),
# catch Q =======
create_parameter_summary(
fit = fit,
parameter_name = "log_catch_q",
notation = "$\\sigma_o$",
prior = "Normal(-5,1)"),
# Pi =======
create_parameter_summary(
fit = fit,
parameter_name = "pi[1]",
notation = "$\\sigma_o$",
prior = "Beta(1,1)"),
create_parameter_summary(
fit = fit,
parameter_name = "pi[2]",
notation = "$\\sigma_o$",
prior = "Beta(1,1)"),
create_parameter_summary(
fit = fit,
parameter_name = "pi[3]",
notation = "$\\sigma_o$",
prior = "Beta(1,1)"),
create_parameter_summary(
fit = fit,
parameter_name = "pi[4]",
notation = "$\\sigma_o$",
prior = "Beta(1,1)"),
## D_scale =======
create_parameter_summary(
fit = fit,
parameter_name = "D_scale",
notation = "$\\sigma_o$",
prior = "Beta(1,1)"),
## D_scale =======
create_parameter_summary(
fit = fit,
parameter_name = "log_c_1",
notation = "$\\sigma_o$",
prior = "XX"),
## D_scale =======
create_parameter_summary(
fit = fit,
parameter_name = "log_c_2",
notation = "$\\sigma_o$",
prior = "XX")
)
# Add parameter grouping
# summary_df$Group <- c(
#                       "Observation Error", "Observation Error",
#                       "Observation Error", "Observation Error",
#                       "Basal Productivity - Juvenile",  "Basal Productivity - Marine",
#                       "Covariate Coefficient- Juvenile", "Covariate Coefficient- Juvenile",
#                       "Covariate Coefficient- Juvenile", "Covariate Coefficient- Juvenile", "Covariate Coefficient- Juvenile",
#                       "Covariate Coefficient- Marine", "Covariate Coefficient- Marine",
#                       "Covariate Coefficient- Marine", "Covariate Coefficient- Marine",
#                       "Selectivity", "Selectivity",
#                       "Selectivity", "Selectivity",
#                       "Mean Instantaneous Fishing Mortality", "Fishing Mortality Deviations",
#                       "Juvenile Abundance Constant",
#                       "Mean Age at Maturity",  "Mean Age at Maturity",
#                       "Mean Age at Maturity",  "Mean Age at Maturity",
#                       "Age Structure Variability")
# Create formatted table with parameter grouping
table <- summary_df %>%
# Reorder columns to include grouping
dplyr::select( Parameter,# Notation,
Estimate, CI_95, ESS, Rhat) #%>%
# Create the table
# kable(format = "latex",
#       escape = FALSE,
#       col.names = c("Group", "Parameter", "Notation", "Estimate",
#                     "95% CI", "ESS", "R-hat", "Prior"),
#       align = c("l", "l", "c", "c", "c", "r", "c", "l"),
#       booktabs = TRUE) %>%
# kable_styling(latex_options = c("striped", "hold_position")) %>%
# # Add grouping
# pack_rows(index = table(summary_df$Group)) %>%
# # Add footnote explaining diagnostics
# footnote(
#   c("ESS: Effective Sample Size",
#     "R-hat: Gelman-Rubin convergence diagnostic")#,
#  # threepartslong = TRUE
# )
# Print table
#print(
View(table)
library(LaplacesDemon)
invlogit(-1.07)
invlogit(-1.93)
invlogit(-2.95)
invlogit(-1.08)
