# thin <- 10
# adapt_delta <- 0.95 # step size
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 4,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
# use these for exploring
warmups <- 2000
total_iterations <- 6000
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 4,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]",#"theta1[5]","theta1[6]",
"theta2[1]","theta2[2]","theta2[3]"#,"theta2[4]"
),
fill_color = "blue")
# ess and rhat  =====
# Find parameters with both low ESS and high Rhat
diagnostics <- data.frame(summary(bh_fit)$summary[,c("n_eff", "Rhat")]) %>%
filter(n_eff <400 | Rhat > 1.1)
View(diagnostics)
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]",#"theta1[5]","theta1[6]",
"theta2[1]","theta2[2]","theta2[3]"#,"theta2[4]"
),
fill_color = "blue")
# traceplot ========
traceplot(bh_fit,pars=  c( "theta1[1]" ,"theta1[2]" ,"theta1[3]" ,"theta1[4]" ,
"theta2[1]","theta2[2]","theta2[3]")) #,"theta2[4]"))
# parameter plots ========
plot(bh_fit, show_density = TRUE, ci_level = 0.95,
pars=  c( "theta1[1]","theta1[2]","theta1[3]","theta1[4]",#"theta1[5]","theta1[6]",
"theta2[1]","theta2[2]","theta2[3]"#,"theta2[4]"
),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "log_c_1" ),
fill_color = "blue")
plot(bh_fit, show_density = FALSE, ci_level = 0.95,
pars=  c( "alpha[1]","alpha[2]", "alpha[3]", "alpha[4]"),
fill_color = "blue")
mean(get_posterior_mean(bh_fit, pars = 'basal_p_2'))
mean(get_posterior_mean(bh_fit, pars = 'basal_p_1'))
mean(get_posterior_mean(bh_fit, pars = 'basal_p_2'))
# For a specific parameter (e.g., 'beta'):
params <- get_posterior_mean(rstan::extract(bh_fit, pars = c("log_c_2", "log_c_1")))
t <- get_posterior_mean(bh_fit, pars = 'basal_p_2')
View(t)
# Plot Observed vs Predicted ========
## Spawners ==========
pred_N_SP <- summary(bh_fit, pars = c("N_sp"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:26, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
# filter(!time>20) %>% # remove years without full return estimates
left_join(years)
# sum to compare with data
summ_n_sp <- pred_N_SP %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
sd = mean(sd)) %>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_sp),
obs = c(data_list_stan$data_stage_sp))) %>%
dplyr::mutate(rowname = "sp")
ggplot(data = summ_n_sp) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_errorbar(aes(x=cal_year, ymin = mean-sd, ymax = mean+sd),
width = 0.1)+
ggtitle("Spawners: obs and predicted")+
scale_x_continuous(breaks = c(2002, 2006,2010, 2015,2020)) +
theme_classic()
## brood year return ======
pred_N_brood_year_return <- summary(bh_fit, pars = c("N_brood_year_return"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = (1:20)) %>%
left_join(years)%>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_return),
obs = data_list_stan$data_stage_return)) %>%
mutate(rowname = "recruit")
ggplot(data = pred_N_brood_year_return) +
geom_line(aes(x=cal_year, y = mean)) +
geom_point(aes(x=cal_year, y = obs)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean))+
ggtitle(("brood year return"))
## harvest =========
pred_N_harvest <- summary(bh_fit, pars = c("N_catch"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:26, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
left_join(years) %>%
group_by(cal_year) %>%
summarise(mean = sum(mean),
se_mean = mean(se_mean)) %>%
dplyr::left_join( data.frame(cal_year = c(data_list_stan$years_data_sp),
obs = c(data_list_stan$data_stage_harvest)), by ="cal_year") %>%
dplyr::mutate(rowname = "harvest")
ggplot(data = pred_N_harvest) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean)) +
geom_ribbon(aes(x=cal_year, ymin = mean-se_mean,
ymax = mean+se_mean))+
ggtitle(("Harvest, est and observed"))
## juveniles ======
# multiply by catch q to fit observations
catch_q <- summary(bh_fit, pars = c("log_catch_q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
mutate(mean = exp(mean))
pred_N_j <- summary(bh_fit, pars = c("N_j"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = 1:nrow(.)) %>%
# filter(!time==22) %>%
left_join(years)
# plot proportions
# sum to compare with data
summ_n_j <- pred_N_j %>%
dplyr::mutate(mean_J_Q = mean*catch_q$mean,
se_mean = se_mean*catch_q$mean) %>%
left_join(data.frame(cal_year = c(data_list_stan$years_data_juv ),
obs = c(data_list_stan$data_stage_j))) %>%
mutate(rowname = "juv")
ggplot(data = summ_n_j) +
geom_point(aes(x=cal_year, y = obs)) +
geom_line(aes(x=cal_year, y = mean_J_Q)) +
# geom_line(aes(x=time, y = mean), color = "green") +
geom_ribbon(aes(x=cal_year, ymin = mean_J_Q-se_mean,
ymax = mean_J_Q+se_mean), alpha = 0.5)+
ggtitle(("Juveniles, est and observed"))
# plot age comp through time =================
age_comp_dat <- data.frame(yukon_fall_obs_agecomp) %>%
dplyr::mutate(time = 1:21) %>%
left_join(years) %>%
gather(1:4, key = "age", value = "obs") %>%
dplyr::mutate(age = case_when(age == "abund_0.3" ~ 3,
age == "abund_0.4" ~ 4,
age == "abund_0.5" ~ 5,
age == "abund_0.6" ~ 6))
age_comp_Q <- summary(bh_fit, pars = c("q"),
probs = c(0.1, 0.9))$summary %>%
data.frame() %>%
rownames_to_column()  %>%
dplyr::mutate(time = rep(1:21, each=4),
age = rep(3:6, length.out = nrow(.))) %>%
left_join(years) %>%
left_join( age_comp_dat) %>%
rename(pred = "mean") %>%
dplyr::select(time,age,pred,obs) %>%
gather(3:4, key = "id", value = "value")
ggplot(data= age_comp_Q) +
geom_line(aes(x=time, y = value, group = id, color = id)) +
facet_wrap(~age, scales = "free") +
theme_classic() +
ylab("Proportion")
## CV ========================================
spawner_cv <- read_xlsx("data/chum_cv.xlsx") %>%
filter(year >= year_min,
year <= year_max_cal)
# add juvenile index CV ========
fall_juv_CV <- read_csv("data/Juvenile_Index_CC/Index for Sabrina.csv") %>%
filter(Stratum == "Stratum_1")
View(fall_juv_CV_all)
View(spawner_cv)
View(spawner_cv)
spawner_cv
# assign data ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
nByrs_return_dat=nByrs_return_dat,
Ps=Ps,
fs=fs,
M = M_fill_stan,
lik_count = 4, # for sensitivity testing
data_stage_j = as.vector(fall_juv$fall_abund),
data_stage_return = as.vector(yukon_fall_return_brood_year$Brood_Year_Return),
#data_stage_return=as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
years_data_sp = yukon_fall_spawners$cal_year,
years_data_juv = fall_juv$brood_year,
years_data_return = yukon_fall_return_brood_year$Brood_Year,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=(yukon_fall_obs_agecomp),
ess_age_comp=ess_age_comp,
# basal_p_1 = 0.9,
# basal_p_2 = 0.9,
# log_c_1 = 15,
# log_c_2 =17,
juv_CV= fall_juv_CV_all$CV,
return_CV = return_CVs$fall_spawner_cv
)
# mod specifics ============
# use these for full model
# warmups <- 10000
# total_iterations <- 25000
# use these for exploring
warmups <- 2000
total_iterations <- 6000
# max_treedepth <-  15
# n_chains <- 4
# n_cores <- 4
# thin <- 10
# adapt_delta <- 0.95 # step size
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
# assign data ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
nByrs_return_dat=nByrs_return_dat,
Ps=Ps,
fs=fs,
M = M_fill_stan,
lik_count = 4, # for sensitivity testing
data_stage_j = as.vector(fall_juv$fall_abund),
data_stage_return = as.vector(yukon_fall_return_brood_year$Brood_Year_Return),
#data_stage_return=as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
years_data_sp = yukon_fall_spawners$cal_year,
years_data_juv = fall_juv$brood_year,
years_data_return = yukon_fall_return_brood_year$Brood_Year,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=(yukon_fall_obs_agecomp),
ess_age_comp=ess_age_comp,
# basal_p_1 = 0.9,
# basal_p_2 = 0.9,
# log_c_1 = 15,
# log_c_2 =17,
juv_CV= fall_juv_CV_all$CV,
return_CV = return_CVs$fall_spawner_cv
)
# mod specifics ============
# use these for full model
# warmups <- 10000
# total_iterations <- 25000
# use these for exploring
warmups <- 2000
total_iterations <- 6000
# max_treedepth <-  15
# n_chains <- 4
# n_cores <- 4
# thin <- 10
# adapt_delta <- 0.95 # step size
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# assign data ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
nByrs_return_dat=nByrs_return_dat,
Ps=Ps,
fs=fs,
M = M_fill_stan,
lik_count = 4, # for sensitivity testing
data_stage_j = as.vector(fall_juv$fall_abund),
data_stage_return = as.vector(yukon_fall_return_brood_year$Brood_Year_Return),
#data_stage_return=as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
years_data_sp = yukon_fall_spawners$cal_year,
years_data_juv = fall_juv$brood_year,
years_data_return = yukon_fall_return_brood_year$Brood_Year,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=(yukon_fall_obs_agecomp),
ess_age_comp=ess_age_comp,
# basal_p_1 = 0.9,
# basal_p_2 = 0.9,
# log_c_1 = 15,
# log_c_2 =17,
juv_CV= fall_juv_CV_all$CV,
return_CV = return_CVs$fall_spawner_cv
)
# mod specifics ============
# use these for full model
# warmups <- 10000
# total_iterations <- 25000
# use these for exploring
warmups <- 2000
total_iterations <- 6000
# max_treedepth <-  15
# n_chains <- 4
# n_cores <- 4
# thin <- 10
# adapt_delta <- 0.95 # step size
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# assign data ==========
data_list_stan <- list(nByrs=nByrs,
nRyrs=nRyrs,
nRyrs_T = nRyrs_T,
A=A,
t_start = t_start,
nByrs_return_dat=nByrs_return_dat,
Ps=Ps,
fs=fs,
M = M_fill_stan,
lik_count = 4, # for sensitivity testing
data_stage_j = as.vector(fall_juv$fall_abund),
data_stage_return = as.vector(yukon_fall_return_brood_year$Brood_Year_Return),
#data_stage_return=as.vector(yukon_fall_recruits$total_run),
data_stage_sp = as.vector(yukon_fall_spawners$Spawners),
data_stage_harvest = as.vector(yukon_fall_harvest$harvest),
years_data_sp = yukon_fall_spawners$cal_year,
years_data_juv = fall_juv$brood_year,
years_data_return = yukon_fall_return_brood_year$Brood_Year,
ncovars1=ncovars1,
ncovars2=ncovars2,
cov1=stage_a_cov,
cov2=stage_b_cov,
o_run_comp=(yukon_fall_obs_agecomp),
ess_age_comp=ess_age_comp,
# basal_p_1 = 0.9,
# basal_p_2 = 0.9,
# log_c_1 = 15,
# log_c_2 =17,
juv_CV= fall_juv_CV_all$CV,
return_CV = return_CVs$fall_spawner_cv
)
# mod specifics ============
# use these for full model
# warmups <- 10000
# total_iterations <- 25000
# use these for exploring
warmups <- 2000
total_iterations <- 6000
# max_treedepth <-  15
# n_chains <- 4
# n_cores <- 4
# thin <- 10
# adapt_delta <- 0.95 # step size
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
# call mod  ===========================
bh_fit <- stan(
file = here::here("scripts", "stan_mod_BH_dat.stan"),
data = data_list_stan,
chains = 1,
warmup = warmups,
iter = total_iterations,
cores = n_cores,
verbose = FALSE,
thin = 10,
control = list(adapt_delta = 0.99)
)
write_rds(bh_fit, "output/stan_fit_DATA.RDS")
